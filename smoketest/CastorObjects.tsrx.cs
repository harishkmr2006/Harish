//----------------------------------------------------------------------------------------------------
// <auto-generated>
//
//		This code was automatically generated by the LeanFT Application Model code generator.
//
//		Changes to this file may cause incorrect behavior and will be lost 
//		when the code is regenerated.
//
// </auto-generated>
//----------------------------------------------------------------------------------------------------
using System;
using HP.LFT.SDK;  
using System.Collections.Generic;

namespace SITSmokeTests
{
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("This class is automatically generated by the LeanFT Application Model code generator.", "14.00")]
	public class CastorObjects : AppModelBase
	{
		#region Constructors

		public CastorObjects()
		{
			Name = @"CastorObjects";
			MessageFromWebpageDialog = new MessageFromWebpageDialogNode(this);
			RebuildDescriptions();
			
		}

		public CastorObjects(ITestObject contextTestObject)
		{
			Name = @"CastorObjects";
			MessageFromWebpageDialog = new MessageFromWebpageDialogNode(contextTestObject, this);
			Castor = new CastorNode(contextTestObject, this);
			CastorPage2 = new CastorPage2Node(contextTestObject, this);
			Page = new PageNode(contextTestObject, this);
			RebuildDescriptions();
			
		}

		#endregion

		#region Test Objects
	
		public MessageFromWebpageDialogNode MessageFromWebpageDialog { get; private set; }
		public CastorNode Castor { get; private set; }
		public CastorPage2Node CastorPage2 { get; private set; }
		public PageNode Page { get; private set; }
	
		#endregion
	
		#region Inner Classes
	
		public sealed class MessageFromWebpageDialogNode : StandardWindows.DialogNodeBase
		{
			#region Constructors
		
			public MessageFromWebpageDialogNode(AppModelBase applicationModel) : base(applicationModel)
			{
				OKButton = new OKButtonNode(this, applicationModel);
				DisplayName = @"Message from webpage";
			}
		
			public MessageFromWebpageDialogNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
			{
				OKButton = new OKButtonNode(this, applicationModel);
				DisplayName = @"Message from webpage";
			}
		
			#endregion
		
			#region Description
		
			protected override HP.LFT.SDK.StdWin.DialogDescription CreateDescription()
			{
				return new HP.LFT.SDK.StdWin.DialogDescription
				{
					IsOwnedWindow = true,
					IsChildWindow = false,
					Text = @"Message from webpage",
					NativeClass = @"#32770"
				};
			}
		
			#endregion
		
			#region Test Objects
		
			public OKButtonNode OKButton { get; private set; }
		
			#endregion
		
			#region Inner Classes
		
			public sealed class OKButtonNode : StandardWindows.ButtonNodeBase
			{
				#region Constructors
			
				public OKButtonNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"OK";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.StdWin.ButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.StdWin.ButtonDescription
					{
						Text = @"OK",
						NativeClass = @"Button"
					};
				}
			
				#endregion
			
			}

			#endregion
		}

		public sealed class CastorNode : Web.PageNodeBase
		{
			#region Constructors
		
			public CastorNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
			{
				SEBOPDBuyerButton = new SEBOPDBuyerButtonNode(this, applicationModel);
				CNHKPDMerchButton = new CNHKPDMerchButtonNode(this, applicationModel);
				DisplayName = @"Castor";
			}
		
			#endregion
		
			#region Description
		
			protected override HP.LFT.SDK.Web.PageDescription CreateDescription()
			{
				return new HP.LFT.SDK.Web.PageDescription
				{
					Title = @"Castor"
				};
			}
		
			#endregion
		
			#region Test Objects
		
			public SEBOPDBuyerButtonNode SEBOPDBuyerButton { get; private set; }
			public CNHKPDMerchButtonNode CNHKPDMerchButton { get; private set; }
		
			#endregion
		
			#region Inner Classes
		
			public sealed class SEBOPDBuyerButtonNode : Web.ButtonNodeBase
			{
				#region Constructors
			
				public SEBOPDBuyerButtonNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"SEBO PD Buyer";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.ButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.ButtonDescription
					{
						ButtonType = @"button",
						TagName = @"INPUT",
						Name = @"SEBO PD Buyer"
					};
				}
			
				#endregion
			
			}

			public sealed class CNHKPDMerchButtonNode : Web.ButtonNodeBase
			{
				#region Constructors
			
				public CNHKPDMerchButtonNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"CNHK PD Merch";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.ButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.ButtonDescription
					{
						ButtonType = @"button",
						TagName = @"INPUT",
						Name = @"CNHK PD Merch"
					};
				}
			
				#endregion
			
			}

			#endregion
		}

		public sealed class CastorPage2Node : Web.PageNodeBase
		{
			#region Constructors
		
			public CastorPage2Node(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
			{
				ContentFrame = new ContentFrameNode(this, applicationModel);
				TvcTabs0HMProductDevelopmentBuyerStartPageTabcontentFrame = new TvcTabs0HMProductDevelopmentBuyerStartPageTabcontentFrameNode(this, applicationModel);
				TableContentFrame = new TableContentFrameNode(this, applicationModel);
				DisplayName = @"CastorPage2";
			}
		
			#endregion
		
			#region Description
		
			protected override HP.LFT.SDK.Web.PageDescription CreateDescription()
			{
				return new HP.LFT.SDK.Web.PageDescription
				{
					Title = @"Castor",
					Index = 0
				};
			}
		
			#endregion
		
			#region Test Objects
		
			public ContentFrameNode ContentFrame { get; private set; }
			public TvcTabs0HMProductDevelopmentBuyerStartPageTabcontentFrameNode TvcTabs0HMProductDevelopmentBuyerStartPageTabcontentFrame { get; private set; }
			public TableContentFrameNode TableContentFrame { get; private set; }
		
			#endregion
		
			#region Inner Classes
		
			public sealed class ContentFrameNode : Web.FrameNodeBase
			{
				#region Constructors
			
				public ContentFrameNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					ProductDevelopmentsLink = new ProductDevelopmentsLinkNode(this, applicationModel);
					DisplayName = @"content";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.FrameDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.FrameDescription
					{
						Name = @"content"
					};
				}
			
				#endregion
			
				#region Test Objects
			
				public ProductDevelopmentsLinkNode ProductDevelopmentsLink { get; private set; }
			
				#endregion
			
				#region Inner Classes
			
				public sealed class ProductDevelopmentsLinkNode : Web.LinkNodeBase
				{
					#region Constructors
				
					public ProductDevelopmentsLinkNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
					{
						DisplayName = @"Product Developments";
					}
				
					#endregion
				
					#region Description
				
					protected override HP.LFT.SDK.Web.LinkDescription CreateDescription()
					{
						return new HP.LFT.SDK.Web.LinkDescription
						{
							TagName = @"A",
							InnerText = @"Product Developments"
						};
					}
				
					#endregion
				
				}

				#endregion
			}

			public sealed class TvcTabs0HMProductDevelopmentBuyerStartPageTabcontentFrameNode : Web.FrameNodeBase
			{
				#region Constructors
			
				public TvcTabs0HMProductDevelopmentBuyerStartPageTabcontentFrameNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					ProductDevelopmentsLink = new ProductDevelopmentsLinkNode(this, applicationModel);
					DisplayName = @"tvcTabs0_HMProductDevelopmentBuyerStartPageTabcontentFrame";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.FrameDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.FrameDescription
					{
						Name = @"tvcTabs0_HMProductDevelopmentBuyerStartPageTabcontentFrame"
					};
				}
			
				#endregion
			
				#region Test Objects
			
				public ProductDevelopmentsLinkNode ProductDevelopmentsLink { get; private set; }
			
				#endregion
			
				#region Inner Classes
			
				public sealed class ProductDevelopmentsLinkNode : Web.LinkNodeBase
				{
					#region Constructors
				
					public ProductDevelopmentsLinkNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
					{
						DisplayName = @"Product Developments";
					}
				
					#endregion
				
					#region Description
				
					protected override HP.LFT.SDK.Web.LinkDescription CreateDescription()
					{
						return new HP.LFT.SDK.Web.LinkDescription
						{
							TagName = @"A",
							InnerText = @"Product Developments"
						};
					}
				
					#endregion
				
				}

				#endregion
			}

			public sealed class TableContentFrameNode : Web.FrameNodeBase
			{
				#region Constructors
			
				public TableContentFrameNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					CreateProductDevelopmentWebElement = new CreateProductDevelopmentWebElementNode(this, applicationModel);
					DisplayName = @"tableContentFrame";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.FrameDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.FrameDescription
					{
						Name = @"tableContentFrame"
					};
				}
			
				#endregion
			
				#region Test Objects
			
				public CreateProductDevelopmentWebElementNode CreateProductDevelopmentWebElement { get; private set; }
			
				#endregion
			
				#region Inner Classes
			
				public sealed class CreateProductDevelopmentWebElementNode : Web.WebElementNodeBase
				{
					#region Constructors
				
					public CreateProductDevelopmentWebElementNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
					{
						DisplayName = @"Create Product Development";
					}
				
					#endregion
				
					#region Description
				
					protected override HP.LFT.SDK.Web.WebElementDescription CreateDescription()
					{
						return new HP.LFT.SDK.Web.WebElementDescription
						{
							TagName = @"SPAN",
							InnerText = @"Create Product Development"
						};
					}
				
					#endregion
				
				}

				#endregion
			}

			#endregion
		}

		public sealed class PageNode : Web.PageNodeBase
		{
			#region Constructors
		
			public PageNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
			{
				OopsIClosedCastorOpenItAgainPleaseWebElement = new OopsIClosedCastorOpenItAgainPleaseWebElementNode(this, applicationModel);
				DisplayName = @"Page";
			}
		
			#endregion
		
			#region Description
		
			protected override HP.LFT.SDK.Web.PageDescription CreateDescription()
			{
				return new HP.LFT.SDK.Web.PageDescription
				{
					Title = string.Empty
				};
			}
		
			#endregion
		
			#region Test Objects
		
			public OopsIClosedCastorOpenItAgainPleaseWebElementNode OopsIClosedCastorOpenItAgainPleaseWebElement { get; private set; }
		
			#endregion
		
			#region Inner Classes
		
			public sealed class OopsIClosedCastorOpenItAgainPleaseWebElementNode : Web.WebElementNodeBase
			{
				#region Constructors
			
				public OopsIClosedCastorOpenItAgainPleaseWebElementNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Oops I closed Castor, open it again please.";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.WebElementDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.WebElementDescription
					{
						ClassName = string.Empty,
						TagName = @"TD",
						InnerText = string.Empty
					};
				}
			
				#endregion
			
			}

			#endregion
		}

		#endregion

		#region Base Classes

		public class StandardWindows
		{
			public abstract class ButtonNodeBase : AppModelNodeBase<HP.LFT.SDK.StdWin.IButton, HP.LFT.SDK.StdWin.ButtonDescription>, HP.LFT.SDK.StdWin.IButton
			{
				public ButtonNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

				#region Public Methods
		
				public void MouseMove(HP.LFT.SDK.Location moveTo)
				{
					 Concrete.MouseMove(moveTo);
				}
		
				public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
				{
					 Concrete.Click(button);
				}
		
				public void Click(HP.LFT.SDK.ClickArgs args)
				{
					 Concrete.Click(args);
				}
		
				public void DoubleClick(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
				{
					 Concrete.DoubleClick(button);
				}
		
				public void DoubleClick(HP.LFT.SDK.ClickArgs args)
				{
					 Concrete.DoubleClick(args);
				}
		
				public void SendKeys(string input, HP.LFT.SDK.KeyModifier modifiers)
				{
					 Concrete.SendKeys(input, modifiers);
				}
		
				public void SendKeys(string input)
				{
					 Concrete.SendKeys(input);
				}
		
				public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
				{
					 Concrete.DragAndDropOn(dropTarget);
				}
		
				public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
				{
					 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
				}
		
				public HP.LFT.SDK.IDescription GetDescription()
				{
					return Concrete.GetDescription();
				}
		
				public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.FindChildren<TChild>(selector);
				}
		
				public bool Exists()
				{
					return Concrete.Exists();
				}
		
				public bool Exists(uint timeout)
				{
					return Concrete.Exists(timeout);
				}
		
				public System.Drawing.Image GetSnapshot()
				{
					return Concrete.GetSnapshot();
				}
		
				public void Highlight()
				{
					 Concrete.Highlight();
				}
		
				public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.HighlightMatches<TChild>(description);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
				{
					return Concrete.GetTextLocations(textToFind);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
				{
					return Concrete.GetTextLocations(textToFind, textArea);
				}
		
				public string GetVisibleText()
				{
					return Concrete.GetVisibleText();
				}
		
				public string GetVisibleText(System.Drawing.Rectangle textArea)
				{
					return Concrete.GetVisibleText(textArea);
				}
		
				public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
				{
					return Concrete.VerifyImageExists(imageToFind, similarity);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
				}
		
				public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.Describe<TChild>(description);
				}
		
				#endregion
		
				#region Public Properties
		
				public bool IsRightAligned
				{
					get { return Concrete.IsRightAligned; }		
				}
		
				public bool IsRightToLeftLayout
				{
					get { return Concrete.IsRightToLeftLayout; }		
				}
		
				public bool IsRightToLeftReading
				{
					get { return Concrete.IsRightToLeftReading; }		
				}
		
				public string AccessibleName
				{
					get { return Concrete.AccessibleName; }		
				}
		
				public string AttachedText
				{
					get { return Concrete.AttachedText; }		
				}
		
				public string Text
				{
					get { return Concrete.Text; }		
				}
		
				public HP.LFT.SDK.WindowExtendedStyles WindowExtendedStyle
				{
					get { return Concrete.WindowExtendedStyle; }		
				}
		
				public HP.LFT.SDK.WindowStyles WindowStyle
				{
					get { return Concrete.WindowStyle; }		
				}
		
				public string WindowClassRegExp
				{
					get { return Concrete.WindowClassRegExp; }		
				}
		
				public int WindowId
				{
					get { return Concrete.WindowId; }		
				}
		
				public bool IsEnabled
				{
					get { return Concrete.IsEnabled; }		
				}
		
				public bool IsFocused
				{
					get { return Concrete.IsFocused; }		
				}
		
				public string NativeClass
				{
					get { return Concrete.NativeClass; }		
				}
		
				public string WindowTitleRegExp
				{
					get { return Concrete.WindowTitleRegExp; }		
				}
		
				public bool IsVisible
				{
					get { return Concrete.IsVisible; }		
				}
		
				public System.IntPtr Handle
				{
					get { return Concrete.Handle; }		
				}
		
				public System.Drawing.Point Location
				{
					get { return Concrete.Location; }		
				}
		
				public System.Drawing.Point AbsoluteLocation
				{
					get { return Concrete.AbsoluteLocation; }		
				}
		
				public System.Drawing.Size Size
				{
					get { return Concrete.Size; }		
				}
		
				public string DisplayName
				{
					get { return Concrete.DisplayName; }		
					set { Concrete.DisplayName = value; }
				}
		
				#endregion
			}

			public abstract class DialogNodeBase : TopLevelObjectNodeBase<HP.LFT.SDK.StdWin.IDialog, HP.LFT.SDK.StdWin.DialogDescription>, HP.LFT.SDK.StdWin.IDialog
			{
				public DialogNodeBase(AppModelBase applicationModel) : base(applicationModel) { }
		
				public DialogNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

				#region Public Methods
		
				public void Activate()
				{
					 Concrete.Activate();
				}
		
				public void Activate(HP.LFT.SDK.MouseButton button)
				{
					 Concrete.Activate(button);
				}
		
				public void Close()
				{
					 Concrete.Close();
				}
		
				public void Maximize()
				{
					 Concrete.Maximize();
				}
		
				public void Minimize()
				{
					 Concrete.Minimize();
				}
		
				public void Move(System.Drawing.Point point)
				{
					 Concrete.Move(point);
				}
		
				public void Move(int x, int y)
				{
					 Concrete.Move(x, y);
				}
		
				public void Resize(System.Drawing.Size size)
				{
					 Concrete.Resize(size);
				}
		
				public void Resize(int width, int height)
				{
					 Concrete.Resize(width, height);
				}
		
				public void Restore()
				{
					 Concrete.Restore();
				}
		
				public void MouseMove(HP.LFT.SDK.Location moveTo)
				{
					 Concrete.MouseMove(moveTo);
				}
		
				public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
				{
					 Concrete.Click(button);
				}
		
				public void Click(HP.LFT.SDK.ClickArgs args)
				{
					 Concrete.Click(args);
				}
		
				public void DoubleClick(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
				{
					 Concrete.DoubleClick(button);
				}
		
				public void DoubleClick(HP.LFT.SDK.ClickArgs args)
				{
					 Concrete.DoubleClick(args);
				}
		
				public void SendKeys(string input, HP.LFT.SDK.KeyModifier modifiers)
				{
					 Concrete.SendKeys(input, modifiers);
				}
		
				public void SendKeys(string input)
				{
					 Concrete.SendKeys(input);
				}
		
				public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
				{
					 Concrete.DragAndDropOn(dropTarget);
				}
		
				public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
				{
					 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
				}
		
				public HP.LFT.SDK.IDescription GetDescription()
				{
					return Concrete.GetDescription();
				}
		
				public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.FindChildren<TChild>(selector);
				}
		
				public bool Exists()
				{
					return Concrete.Exists();
				}
		
				public bool Exists(uint timeout)
				{
					return Concrete.Exists(timeout);
				}
		
				public System.Drawing.Image GetSnapshot()
				{
					return Concrete.GetSnapshot();
				}
		
				public void Highlight()
				{
					 Concrete.Highlight();
				}
		
				public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.HighlightMatches<TChild>(description);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
				{
					return Concrete.GetTextLocations(textToFind);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
				{
					return Concrete.GetTextLocations(textToFind, textArea);
				}
		
				public string GetVisibleText()
				{
					return Concrete.GetVisibleText();
				}
		
				public string GetVisibleText(System.Drawing.Rectangle textArea)
				{
					return Concrete.GetVisibleText(textArea);
				}
		
				public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
				{
					return Concrete.VerifyImageExists(imageToFind, similarity);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
				}
		
				public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.Describe<TChild>(description);
				}
		
				#endregion
		
				#region Public Properties
		
				public bool IsActive
				{
					get { return Concrete.IsActive; }		
				}
		
				public bool HasBorder
				{
					get { return Concrete.HasBorder; }		
				}
		
				public bool HasCaption
				{
					get { return Concrete.HasCaption; }		
				}
		
				public bool HasSizebox
				{
					get { return Concrete.HasSizebox; }		
				}
		
				public bool HasSystemMenu
				{
					get { return Concrete.HasSystemMenu; }		
				}
		
				public bool IsOwnedWindow
				{
					get { return Concrete.IsOwnedWindow; }		
				}
		
				public bool IsChildWindow
				{
					get { return Concrete.IsChildWindow; }		
				}
		
				public bool IsMdiChildWindow
				{
					get { return Concrete.IsMdiChildWindow; }		
				}
		
				public bool IsPopupWindow
				{
					get { return Concrete.IsPopupWindow; }		
				}
		
				public bool IsToolWindow
				{
					get { return Concrete.IsToolWindow; }		
				}
		
				public bool IsMaximizable
				{
					get { return Concrete.IsMaximizable; }		
				}
		
				public bool IsMinimizable
				{
					get { return Concrete.IsMinimizable; }		
				}
		
				public HP.LFT.SDK.WindowState WindowState
				{
					get { return Concrete.WindowState; }		
				}
		
				public bool IsTopmost
				{
					get { return Concrete.IsTopmost; }		
				}
		
				public bool IsRightAligned
				{
					get { return Concrete.IsRightAligned; }		
				}
		
				public bool IsRightToLeftLayout
				{
					get { return Concrete.IsRightToLeftLayout; }		
				}
		
				public bool IsRightToLeftReading
				{
					get { return Concrete.IsRightToLeftReading; }		
				}
		
				public string AccessibleName
				{
					get { return Concrete.AccessibleName; }		
				}
		
				public string AttachedText
				{
					get { return Concrete.AttachedText; }		
				}
		
				public string Text
				{
					get { return Concrete.Text; }		
				}
		
				public HP.LFT.SDK.WindowExtendedStyles WindowExtendedStyle
				{
					get { return Concrete.WindowExtendedStyle; }		
				}
		
				public HP.LFT.SDK.WindowStyles WindowStyle
				{
					get { return Concrete.WindowStyle; }		
				}
		
				public string WindowClassRegExp
				{
					get { return Concrete.WindowClassRegExp; }		
				}
		
				public int WindowId
				{
					get { return Concrete.WindowId; }		
				}
		
				public bool IsEnabled
				{
					get { return Concrete.IsEnabled; }		
				}
		
				public bool IsFocused
				{
					get { return Concrete.IsFocused; }		
				}
		
				public string NativeClass
				{
					get { return Concrete.NativeClass; }		
				}
		
				public string WindowTitleRegExp
				{
					get { return Concrete.WindowTitleRegExp; }		
				}
		
				public bool IsVisible
				{
					get { return Concrete.IsVisible; }		
				}
		
				public System.IntPtr Handle
				{
					get { return Concrete.Handle; }		
				}
		
				public System.Drawing.Point Location
				{
					get { return Concrete.Location; }		
				}
		
				public System.Drawing.Point AbsoluteLocation
				{
					get { return Concrete.AbsoluteLocation; }		
				}
		
				public System.Drawing.Size Size
				{
					get { return Concrete.Size; }		
				}
		
				public string DisplayName
				{
					get { return Concrete.DisplayName; }		
					set { Concrete.DisplayName = value; }
				}
		
				#endregion
			}

		}
	
		public class Web
		{
			public abstract class WebElementNodeBase : AppModelNodeBase<HP.LFT.SDK.Web.IWebElement, HP.LFT.SDK.Web.WebElementDescription>, HP.LFT.SDK.Web.IWebElement
			{
				public WebElementNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

				#region Public Methods
		
				public void DoubleClick()
				{
					 Concrete.DoubleClick();
				}
		
				public void DoubleClick(HP.LFT.SDK.Web.WebDoubleClickArgs args)
				{
					 Concrete.DoubleClick(args);
				}
		
				public void HoverTap()
				{
					 Concrete.HoverTap();
				}
		
				public void HoverTap(HP.LFT.SDK.Location location)
				{
					 Concrete.HoverTap(location);
				}
		
				public void FireEvent(HP.LFT.SDK.Web.EventInfo eventInfo)
				{
					 Concrete.FireEvent(eventInfo);
				}
		
				public void LongPress()
				{
					 Concrete.LongPress();
				}
		
				public void LongPress(HP.LFT.SDK.Web.WebLongPressArgs args)
				{
					 Concrete.LongPress(args);
				}
		
				public void Pan(long deltaX, long deltaY)
				{
					 Concrete.Pan(deltaX, deltaY);
				}
		
				public void Pan(HP.LFT.SDK.Web.WebPanArgs args)
				{
					 Concrete.Pan(args);
				}
		
				public void Pinch(double scale)
				{
					 Concrete.Pinch(scale);
				}
		
				public void Pinch(HP.LFT.SDK.Web.WebPinchArgs args)
				{
					 Concrete.Pinch(args);
				}
		
				public void Swipe(HP.LFT.SDK.SwipeDirection direction)
				{
					 Concrete.Swipe(direction);
				}
		
				public void Swipe(HP.LFT.SDK.Web.WebSwipeArgs args)
				{
					 Concrete.Swipe(args);
				}
		
				public HP.LFT.SDK.IDescription GetDescription()
				{
					return Concrete.GetDescription();
				}
		
				public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.FindChildren<TChild>(selector);
				}
		
				public bool Exists()
				{
					return Concrete.Exists();
				}
		
				public bool Exists(uint timeout)
				{
					return Concrete.Exists(timeout);
				}
		
				public System.Drawing.Image GetSnapshot()
				{
					return Concrete.GetSnapshot();
				}
		
				public void Highlight()
				{
					 Concrete.Highlight();
				}
		
				public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.HighlightMatches<TChild>(description);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
				{
					return Concrete.GetTextLocations(textToFind);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
				{
					return Concrete.GetTextLocations(textToFind, textArea);
				}
		
				public string GetVisibleText()
				{
					return Concrete.GetVisibleText();
				}
		
				public string GetVisibleText(System.Drawing.Rectangle textArea)
				{
					return Concrete.GetVisibleText(textArea);
				}
		
				public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
				{
					return Concrete.VerifyImageExists(imageToFind, similarity);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
				}
		
				public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.Describe<TChild>(description);
				}
		
				public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
				{
					 Concrete.Click(button);
				}
		
				public void Click(HP.LFT.SDK.ClickArgs args)
				{
					 Concrete.Click(args);
				}
		
				public string GetAttribute(string attributeName)
				{
					return Concrete.GetAttribute(attributeName);
				}
		
				public string GetComputedStyle(string styleProperty)
				{
					return Concrete.GetComputedStyle(styleProperty);
				}
		
				public TChild Describe<TChild>(HP.LFT.SDK.Web.XPathDescription xpath)  where TChild:class, HP.LFT.SDK.Web.IWebElement
				{
					return Concrete.Describe<TChild>(xpath);
				}
		
				public TChild Describe<TChild>(HP.LFT.SDK.Web.CSSDescription cssSelector)  where TChild:class, HP.LFT.SDK.Web.IWebElement
				{
					return Concrete.Describe<TChild>(cssSelector);
				}
		
				public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
				{
					 Concrete.DragAndDropOn(dropTarget);
				}
		
				public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
				{
					 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
				}
		
				#endregion
		
				#region Public Properties
		
				public string XPath
				{
					get { return Concrete.XPath; }		
				}
		
				public string AccessibilityName
				{
					get { return Concrete.AccessibilityName; }		
				}
		
				public string CSSSelector
				{
					get { return Concrete.CSSSelector; }		
				}
		
				public string Role
				{
					get { return Concrete.Role; }		
				}
		
				public string DisplayName
				{
					get { return Concrete.DisplayName; }		
					set { Concrete.DisplayName = value; }
				}
		
				public string ClassName
				{
					get { return Concrete.ClassName; }		
				}
		
				public string Id
				{
					get { return Concrete.Id; }		
				}
		
				public string TagName
				{
					get { return Concrete.TagName; }		
				}
		
				public string InnerHTML
				{
					get { return Concrete.InnerHTML; }		
				}
		
				public string OuterHTML
				{
					get { return Concrete.OuterHTML; }		
				}
		
				public string InnerText
				{
					get { return Concrete.InnerText; }		
				}
		
				public string OuterText
				{
					get { return Concrete.OuterText; }		
				}
		
				public string Name
				{
					get { return Concrete.Name; }		
				}
		
				public string Title
				{
					get { return Concrete.Title; }		
				}
		
				public bool IsVisible
				{
					get { return Concrete.IsVisible; }		
				}
		
				public System.Collections.Generic.IReadOnlyDictionary<string, string> Attributes
				{
					get { return Concrete.Attributes; }		
				}
		
				public System.Collections.Generic.IReadOnlyDictionary<string, string> Styles
				{
					get { return Concrete.Styles; }		
				}
		
				public System.Drawing.Point Location
				{
					get { return Concrete.Location; }		
				}
		
				public System.Drawing.Point AbsoluteLocation
				{
					get { return Concrete.AbsoluteLocation; }		
				}
		
				public System.Drawing.Size Size
				{
					get { return Concrete.Size; }		
				}
		
				public dynamic NativeObject
				{
					get { return Concrete.NativeObject; }		
				}
		
				#endregion
			}

			public abstract class LinkNodeBase : AppModelNodeBase<HP.LFT.SDK.Web.ILink, HP.LFT.SDK.Web.LinkDescription>, HP.LFT.SDK.Web.ILink
			{
				public LinkNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

				#region Public Methods
		
				public void DoubleClick()
				{
					 Concrete.DoubleClick();
				}
		
				public void DoubleClick(HP.LFT.SDK.Web.WebDoubleClickArgs args)
				{
					 Concrete.DoubleClick(args);
				}
		
				public void HoverTap()
				{
					 Concrete.HoverTap();
				}
		
				public void HoverTap(HP.LFT.SDK.Location location)
				{
					 Concrete.HoverTap(location);
				}
		
				public void FireEvent(HP.LFT.SDK.Web.EventInfo eventInfo)
				{
					 Concrete.FireEvent(eventInfo);
				}
		
				public void LongPress()
				{
					 Concrete.LongPress();
				}
		
				public void LongPress(HP.LFT.SDK.Web.WebLongPressArgs args)
				{
					 Concrete.LongPress(args);
				}
		
				public void Pan(long deltaX, long deltaY)
				{
					 Concrete.Pan(deltaX, deltaY);
				}
		
				public void Pan(HP.LFT.SDK.Web.WebPanArgs args)
				{
					 Concrete.Pan(args);
				}
		
				public void Pinch(double scale)
				{
					 Concrete.Pinch(scale);
				}
		
				public void Pinch(HP.LFT.SDK.Web.WebPinchArgs args)
				{
					 Concrete.Pinch(args);
				}
		
				public void Swipe(HP.LFT.SDK.SwipeDirection direction)
				{
					 Concrete.Swipe(direction);
				}
		
				public void Swipe(HP.LFT.SDK.Web.WebSwipeArgs args)
				{
					 Concrete.Swipe(args);
				}
		
				public HP.LFT.SDK.IDescription GetDescription()
				{
					return Concrete.GetDescription();
				}
		
				public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.FindChildren<TChild>(selector);
				}
		
				public bool Exists()
				{
					return Concrete.Exists();
				}
		
				public bool Exists(uint timeout)
				{
					return Concrete.Exists(timeout);
				}
		
				public System.Drawing.Image GetSnapshot()
				{
					return Concrete.GetSnapshot();
				}
		
				public void Highlight()
				{
					 Concrete.Highlight();
				}
		
				public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.HighlightMatches<TChild>(description);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
				{
					return Concrete.GetTextLocations(textToFind);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
				{
					return Concrete.GetTextLocations(textToFind, textArea);
				}
		
				public string GetVisibleText()
				{
					return Concrete.GetVisibleText();
				}
		
				public string GetVisibleText(System.Drawing.Rectangle textArea)
				{
					return Concrete.GetVisibleText(textArea);
				}
		
				public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
				{
					return Concrete.VerifyImageExists(imageToFind, similarity);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
				}
		
				public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.Describe<TChild>(description);
				}
		
				public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
				{
					 Concrete.Click(button);
				}
		
				public void Click(HP.LFT.SDK.ClickArgs args)
				{
					 Concrete.Click(args);
				}
		
				public string GetAttribute(string attributeName)
				{
					return Concrete.GetAttribute(attributeName);
				}
		
				public string GetComputedStyle(string styleProperty)
				{
					return Concrete.GetComputedStyle(styleProperty);
				}
		
				public TChild Describe<TChild>(HP.LFT.SDK.Web.XPathDescription xpath)  where TChild:class, HP.LFT.SDK.Web.IWebElement
				{
					return Concrete.Describe<TChild>(xpath);
				}
		
				public TChild Describe<TChild>(HP.LFT.SDK.Web.CSSDescription cssSelector)  where TChild:class, HP.LFT.SDK.Web.IWebElement
				{
					return Concrete.Describe<TChild>(cssSelector);
				}
		
				public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
				{
					 Concrete.DragAndDropOn(dropTarget);
				}
		
				public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
				{
					 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
				}
		
				#endregion
		
				#region Public Properties
		
				public string Href
				{
					get { return Concrete.Href; }		
				}
		
				public string Target
				{
					get { return Concrete.Target; }		
				}
		
				public string FontName
				{
					get { return Concrete.FontName; }		
				}
		
				public string BackgroundColor
				{
					get { return Concrete.BackgroundColor; }		
				}
		
				public string Color
				{
					get { return Concrete.Color; }		
				}
		
				public string XPath
				{
					get { return Concrete.XPath; }		
				}
		
				public string AccessibilityName
				{
					get { return Concrete.AccessibilityName; }		
				}
		
				public string CSSSelector
				{
					get { return Concrete.CSSSelector; }		
				}
		
				public string Role
				{
					get { return Concrete.Role; }		
				}
		
				public string DisplayName
				{
					get { return Concrete.DisplayName; }		
					set { Concrete.DisplayName = value; }
				}
		
				public string ClassName
				{
					get { return Concrete.ClassName; }		
				}
		
				public string Id
				{
					get { return Concrete.Id; }		
				}
		
				public string TagName
				{
					get { return Concrete.TagName; }		
				}
		
				public string InnerHTML
				{
					get { return Concrete.InnerHTML; }		
				}
		
				public string OuterHTML
				{
					get { return Concrete.OuterHTML; }		
				}
		
				public string InnerText
				{
					get { return Concrete.InnerText; }		
				}
		
				public string OuterText
				{
					get { return Concrete.OuterText; }		
				}
		
				public string Name
				{
					get { return Concrete.Name; }		
				}
		
				public string Title
				{
					get { return Concrete.Title; }		
				}
		
				public bool IsVisible
				{
					get { return Concrete.IsVisible; }		
				}
		
				public System.Collections.Generic.IReadOnlyDictionary<string, string> Attributes
				{
					get { return Concrete.Attributes; }		
				}
		
				public System.Collections.Generic.IReadOnlyDictionary<string, string> Styles
				{
					get { return Concrete.Styles; }		
				}
		
				public System.Drawing.Point Location
				{
					get { return Concrete.Location; }		
				}
		
				public System.Drawing.Point AbsoluteLocation
				{
					get { return Concrete.AbsoluteLocation; }		
				}
		
				public System.Drawing.Size Size
				{
					get { return Concrete.Size; }		
				}
		
				public dynamic NativeObject
				{
					get { return Concrete.NativeObject; }		
				}
		
				#endregion
			}

			public abstract class FrameNodeBase : AppModelNodeBase<HP.LFT.SDK.Web.IFrame, HP.LFT.SDK.Web.FrameDescription>, HP.LFT.SDK.Web.IFrame
			{
				public FrameNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

				#region Public Methods
		
				public TResult RunJavaScript<TResult>(string scriptToRun) 
				{
					return Concrete.RunJavaScript<TResult>(scriptToRun);
				}
		
				public string RunJavaScript(string scriptToRun)
				{
					return Concrete.RunJavaScript(scriptToRun);
				}
		
				public void Sync()
				{
					 Concrete.Sync();
				}
		
				public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.Describe<TChild>(description);
				}
		
				public TChild Describe<TChild>(HP.LFT.SDK.Web.XPathDescription xpath)  where TChild:class, HP.LFT.SDK.Web.IWebElement
				{
					return Concrete.Describe<TChild>(xpath);
				}
		
				public TChild Describe<TChild>(HP.LFT.SDK.Web.CSSDescription cssSelector)  where TChild:class, HP.LFT.SDK.Web.IWebElement
				{
					return Concrete.Describe<TChild>(cssSelector);
				}
		
				public HP.LFT.SDK.IDescription GetDescription()
				{
					return Concrete.GetDescription();
				}
		
				public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.FindChildren<TChild>(selector);
				}
		
				public bool Exists()
				{
					return Concrete.Exists();
				}
		
				public bool Exists(uint timeout)
				{
					return Concrete.Exists(timeout);
				}
		
				public System.Drawing.Image GetSnapshot()
				{
					return Concrete.GetSnapshot();
				}
		
				public void Highlight()
				{
					 Concrete.Highlight();
				}
		
				public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.HighlightMatches<TChild>(description);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
				{
					return Concrete.GetTextLocations(textToFind);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
				{
					return Concrete.GetTextLocations(textToFind, textArea);
				}
		
				public string GetVisibleText()
				{
					return Concrete.GetVisibleText();
				}
		
				public string GetVisibleText(System.Drawing.Rectangle textArea)
				{
					return Concrete.GetVisibleText(textArea);
				}
		
				public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
				{
					return Concrete.VerifyImageExists(imageToFind, similarity);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
				}
		
				public string GetAttribute(string attributeName)
				{
					return Concrete.GetAttribute(attributeName);
				}
		
				public string GetComputedStyle(string styleProperty)
				{
					return Concrete.GetComputedStyle(styleProperty);
				}
		
				#endregion
		
				#region Public Properties
		
				public string Url
				{
					get { return Concrete.Url; }		
				}
		
				public string Text
				{
					get { return Concrete.Text; }		
				}
		
				public string DisplayName
				{
					get { return Concrete.DisplayName; }		
					set { Concrete.DisplayName = value; }
				}
		
				public string ClassName
				{
					get { return Concrete.ClassName; }		
				}
		
				public string Id
				{
					get { return Concrete.Id; }		
				}
		
				public string TagName
				{
					get { return Concrete.TagName; }		
				}
		
				public string InnerHTML
				{
					get { return Concrete.InnerHTML; }		
				}
		
				public string OuterHTML
				{
					get { return Concrete.OuterHTML; }		
				}
		
				public string InnerText
				{
					get { return Concrete.InnerText; }		
				}
		
				public string OuterText
				{
					get { return Concrete.OuterText; }		
				}
		
				public string Name
				{
					get { return Concrete.Name; }		
				}
		
				public string Title
				{
					get { return Concrete.Title; }		
				}
		
				public bool IsVisible
				{
					get { return Concrete.IsVisible; }		
				}
		
				public System.Collections.Generic.IReadOnlyDictionary<string, string> Attributes
				{
					get { return Concrete.Attributes; }		
				}
		
				public System.Collections.Generic.IReadOnlyDictionary<string, string> Styles
				{
					get { return Concrete.Styles; }		
				}
		
				public System.Drawing.Point Location
				{
					get { return Concrete.Location; }		
				}
		
				public System.Drawing.Point AbsoluteLocation
				{
					get { return Concrete.AbsoluteLocation; }		
				}
		
				public System.Drawing.Size Size
				{
					get { return Concrete.Size; }		
				}
		
				public dynamic NativeObject
				{
					get { return Concrete.NativeObject; }		
				}
		
				#endregion
			}

			public abstract class ButtonNodeBase : AppModelNodeBase<HP.LFT.SDK.Web.IButton, HP.LFT.SDK.Web.ButtonDescription>, HP.LFT.SDK.Web.IButton
			{
				public ButtonNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

				#region Public Methods
		
				public void DoubleClick()
				{
					 Concrete.DoubleClick();
				}
		
				public void DoubleClick(HP.LFT.SDK.Web.WebDoubleClickArgs args)
				{
					 Concrete.DoubleClick(args);
				}
		
				public void HoverTap()
				{
					 Concrete.HoverTap();
				}
		
				public void HoverTap(HP.LFT.SDK.Location location)
				{
					 Concrete.HoverTap(location);
				}
		
				public void FireEvent(HP.LFT.SDK.Web.EventInfo eventInfo)
				{
					 Concrete.FireEvent(eventInfo);
				}
		
				public void LongPress()
				{
					 Concrete.LongPress();
				}
		
				public void LongPress(HP.LFT.SDK.Web.WebLongPressArgs args)
				{
					 Concrete.LongPress(args);
				}
		
				public void Pan(long deltaX, long deltaY)
				{
					 Concrete.Pan(deltaX, deltaY);
				}
		
				public void Pan(HP.LFT.SDK.Web.WebPanArgs args)
				{
					 Concrete.Pan(args);
				}
		
				public void Pinch(double scale)
				{
					 Concrete.Pinch(scale);
				}
		
				public void Pinch(HP.LFT.SDK.Web.WebPinchArgs args)
				{
					 Concrete.Pinch(args);
				}
		
				public void Swipe(HP.LFT.SDK.SwipeDirection direction)
				{
					 Concrete.Swipe(direction);
				}
		
				public void Swipe(HP.LFT.SDK.Web.WebSwipeArgs args)
				{
					 Concrete.Swipe(args);
				}
		
				public HP.LFT.SDK.IDescription GetDescription()
				{
					return Concrete.GetDescription();
				}
		
				public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.FindChildren<TChild>(selector);
				}
		
				public bool Exists()
				{
					return Concrete.Exists();
				}
		
				public bool Exists(uint timeout)
				{
					return Concrete.Exists(timeout);
				}
		
				public System.Drawing.Image GetSnapshot()
				{
					return Concrete.GetSnapshot();
				}
		
				public void Highlight()
				{
					 Concrete.Highlight();
				}
		
				public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.HighlightMatches<TChild>(description);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
				{
					return Concrete.GetTextLocations(textToFind);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
				{
					return Concrete.GetTextLocations(textToFind, textArea);
				}
		
				public string GetVisibleText()
				{
					return Concrete.GetVisibleText();
				}
		
				public string GetVisibleText(System.Drawing.Rectangle textArea)
				{
					return Concrete.GetVisibleText(textArea);
				}
		
				public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
				{
					return Concrete.VerifyImageExists(imageToFind, similarity);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
				}
		
				public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.Describe<TChild>(description);
				}
		
				public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
				{
					 Concrete.Click(button);
				}
		
				public void Click(HP.LFT.SDK.ClickArgs args)
				{
					 Concrete.Click(args);
				}
		
				public string GetAttribute(string attributeName)
				{
					return Concrete.GetAttribute(attributeName);
				}
		
				public string GetComputedStyle(string styleProperty)
				{
					return Concrete.GetComputedStyle(styleProperty);
				}
		
				public TChild Describe<TChild>(HP.LFT.SDK.Web.XPathDescription xpath)  where TChild:class, HP.LFT.SDK.Web.IWebElement
				{
					return Concrete.Describe<TChild>(xpath);
				}
		
				public TChild Describe<TChild>(HP.LFT.SDK.Web.CSSDescription cssSelector)  where TChild:class, HP.LFT.SDK.Web.IWebElement
				{
					return Concrete.Describe<TChild>(cssSelector);
				}
		
				public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
				{
					 Concrete.DragAndDropOn(dropTarget);
				}
		
				public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
				{
					 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
				}
		
				#endregion
		
				#region Public Properties
		
				public string ButtonType
				{
					get { return Concrete.ButtonType; }		
				}
		
				public bool IsEnabled
				{
					get { return Concrete.IsEnabled; }		
				}
		
				public string Text
				{
					get { return Concrete.Text; }		
				}
		
				public string XPath
				{
					get { return Concrete.XPath; }		
				}
		
				public string AccessibilityName
				{
					get { return Concrete.AccessibilityName; }		
				}
		
				public string CSSSelector
				{
					get { return Concrete.CSSSelector; }		
				}
		
				public string Role
				{
					get { return Concrete.Role; }		
				}
		
				public string DisplayName
				{
					get { return Concrete.DisplayName; }		
					set { Concrete.DisplayName = value; }
				}
		
				public string ClassName
				{
					get { return Concrete.ClassName; }		
				}
		
				public string Id
				{
					get { return Concrete.Id; }		
				}
		
				public string TagName
				{
					get { return Concrete.TagName; }		
				}
		
				public string InnerHTML
				{
					get { return Concrete.InnerHTML; }		
				}
		
				public string OuterHTML
				{
					get { return Concrete.OuterHTML; }		
				}
		
				public string InnerText
				{
					get { return Concrete.InnerText; }		
				}
		
				public string OuterText
				{
					get { return Concrete.OuterText; }		
				}
		
				public string Name
				{
					get { return Concrete.Name; }		
				}
		
				public string Title
				{
					get { return Concrete.Title; }		
				}
		
				public bool IsVisible
				{
					get { return Concrete.IsVisible; }		
				}
		
				public System.Collections.Generic.IReadOnlyDictionary<string, string> Attributes
				{
					get { return Concrete.Attributes; }		
				}
		
				public System.Collections.Generic.IReadOnlyDictionary<string, string> Styles
				{
					get { return Concrete.Styles; }		
				}
		
				public System.Drawing.Point Location
				{
					get { return Concrete.Location; }		
				}
		
				public System.Drawing.Point AbsoluteLocation
				{
					get { return Concrete.AbsoluteLocation; }		
				}
		
				public System.Drawing.Size Size
				{
					get { return Concrete.Size; }		
				}
		
				public dynamic NativeObject
				{
					get { return Concrete.NativeObject; }		
				}
		
				#endregion
			}

			public abstract class PageNodeBase : AppModelNodeBase<HP.LFT.SDK.Web.IPage, HP.LFT.SDK.Web.PageDescription>, HP.LFT.SDK.Web.IPage
			{
				public PageNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

				#region Public Methods
		
				public TResult RunJavaScript<TResult>(string scriptToRun) 
				{
					return Concrete.RunJavaScript<TResult>(scriptToRun);
				}
		
				public string RunJavaScript(string scriptToRun)
				{
					return Concrete.RunJavaScript(scriptToRun);
				}
		
				public void Sync()
				{
					 Concrete.Sync();
				}
		
				public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.Describe<TChild>(description);
				}
		
				public TChild Describe<TChild>(HP.LFT.SDK.Web.XPathDescription xpath)  where TChild:class, HP.LFT.SDK.Web.IWebElement
				{
					return Concrete.Describe<TChild>(xpath);
				}
		
				public TChild Describe<TChild>(HP.LFT.SDK.Web.CSSDescription cssSelector)  where TChild:class, HP.LFT.SDK.Web.IWebElement
				{
					return Concrete.Describe<TChild>(cssSelector);
				}
		
				public HP.LFT.SDK.IDescription GetDescription()
				{
					return Concrete.GetDescription();
				}
		
				public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.FindChildren<TChild>(selector);
				}
		
				public bool Exists()
				{
					return Concrete.Exists();
				}
		
				public bool Exists(uint timeout)
				{
					return Concrete.Exists(timeout);
				}
		
				public System.Drawing.Image GetSnapshot()
				{
					return Concrete.GetSnapshot();
				}
		
				public void Highlight()
				{
					 Concrete.Highlight();
				}
		
				public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.HighlightMatches<TChild>(description);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
				{
					return Concrete.GetTextLocations(textToFind);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
				{
					return Concrete.GetTextLocations(textToFind, textArea);
				}
		
				public string GetVisibleText()
				{
					return Concrete.GetVisibleText();
				}
		
				public string GetVisibleText(System.Drawing.Rectangle textArea)
				{
					return Concrete.GetVisibleText(textArea);
				}
		
				public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
				{
					return Concrete.VerifyImageExists(imageToFind, similarity);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
				}
		
				#endregion
		
				#region Public Properties
		
				public string Url
				{
					get { return Concrete.Url; }		
				}
		
				public string Text
				{
					get { return Concrete.Text; }		
				}
		
				public string Title
				{
					get { return Concrete.Title; }		
				}
		
				public System.Drawing.Point AbsoluteLocation
				{
					get { return Concrete.AbsoluteLocation; }		
				}
		
				public System.Drawing.Size Size
				{
					get { return Concrete.Size; }		
				}
		
				public string DisplayName
				{
					get { return Concrete.DisplayName; }		
					set { Concrete.DisplayName = value; }
				}
		
				public dynamic NativeObject
				{
					get { return Concrete.NativeObject; }		
				}
		
				#endregion
			}

		}
	
		#endregion
	}
}
