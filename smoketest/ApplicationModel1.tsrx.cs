//----------------------------------------------------------------------------------------------------
// <auto-generated>
//
//		This code was automatically generated by the LeanFT Application Model code generator.
//
//		Changes to this file may cause incorrect behavior and will be lost 
//		when the code is regenerated.
//
// </auto-generated>
//----------------------------------------------------------------------------------------------------
using System;
using HP.LFT.SDK;  
using System.Collections.Generic;

namespace SITSmokeTests
{
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("This class is automatically generated by the LeanFT Application Model code generator.", "14.00")]
	public class HMOrderObject : AppModelBase
	{
		#region Constructors

		public HMOrderObject()
		{
			Name = @"HMOrderObject";
			HMOrderWindow = new HMOrderWindowNode(this);
			MozillaFirefoxWindow = new MozillaFirefoxWindowNode(this);
			RebuildDescriptions();
			
		}

		public HMOrderObject(ITestObject contextTestObject)
		{
			Name = @"HMOrderObject";
			HMOrderWindow = new HMOrderWindowNode(contextTestObject, this);
			MozillaFirefoxWindow = new MozillaFirefoxWindowNode(contextTestObject, this);
			RebuildDescriptions();
			
		}

		#endregion

		#region Test Objects
	
		public HMOrderWindowNode HMOrderWindow { get; private set; }
		public MozillaFirefoxWindowNode MozillaFirefoxWindow { get; private set; }
	
		#endregion
	
		#region Inner Classes
	
		public sealed class HMOrderWindowNode : WinForms.WindowNodeBase
		{
			#region Constructors
		
			public HMOrderWindowNode(AppModelBase applicationModel) : base(applicationModel)
			{
				BaseFormToolbarsDockAreaTopUiObject = new BaseFormToolbarsDockAreaTopUiObjectNode(this, applicationModel);
				OrderExplorerWindow = new OrderExplorerWindowNode(this, applicationModel);
				NewOrder = new NewOrderNode(this, applicationModel);
				OrderEditProperties = new OrderEditPropertiesNode(this, applicationModel);
				UpdateTODWindow = new UpdateTODWindowNode(this, applicationModel);
				UltraGridRightClickMenuToolBar = new UltraGridRightClickMenuToolBarNode(this, applicationModel);
				TestAutoProdWindow = new TestAutoProdWindowNode(this, applicationModel);
				ClosingHMOrderWindow = new ClosingHMOrderWindowNode(this, applicationModel);
				DisplayName = @"HMOrder";
			}
		
			public HMOrderWindowNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
			{
				BaseFormToolbarsDockAreaTopUiObject = new BaseFormToolbarsDockAreaTopUiObjectNode(this, applicationModel);
				OrderExplorerWindow = new OrderExplorerWindowNode(this, applicationModel);
				NewOrder = new NewOrderNode(this, applicationModel);
				OrderEditProperties = new OrderEditPropertiesNode(this, applicationModel);
				UpdateTODWindow = new UpdateTODWindowNode(this, applicationModel);
				UltraGridRightClickMenuToolBar = new UltraGridRightClickMenuToolBarNode(this, applicationModel);
				TestAutoProdWindow = new TestAutoProdWindowNode(this, applicationModel);
				ClosingHMOrderWindow = new ClosingHMOrderWindowNode(this, applicationModel);
				DisplayName = @"HMOrder";
			}
		
			#endregion
		
			#region Description
		
			protected override HP.LFT.SDK.WinForms.WindowDescription CreateDescription()
			{
				return new HP.LFT.SDK.WinForms.WindowDescription
				{
					IsChildWindow = false,
					IsOwnedWindow = false,
					ObjectName = @"OrderParent",
					WindowTitleRegExp = @"HMOrder"
				};
			}
		
			#endregion
		
			#region Test Objects
		
			public BaseFormToolbarsDockAreaTopUiObjectNode BaseFormToolbarsDockAreaTopUiObject { get; private set; }
			public OrderExplorerWindowNode OrderExplorerWindow { get; private set; }
			public NewOrderNode NewOrder { get; private set; }
			public OrderEditPropertiesNode OrderEditProperties { get; private set; }
			public UpdateTODWindowNode UpdateTODWindow { get; private set; }
			public UltraGridRightClickMenuToolBarNode UltraGridRightClickMenuToolBar { get; private set; }
			public TestAutoProdWindowNode TestAutoProdWindow { get; private set; }
			public ClosingHMOrderWindowNode ClosingHMOrderWindow { get; private set; }
		
			#endregion
		
			#region Inner Classes
		
			public sealed class BaseFormToolbarsDockAreaTopUiObjectNode : WinForms.UiObjectNodeBase
			{
				#region Constructors
			
				public BaseFormToolbarsDockAreaTopUiObjectNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"_BaseForm_Toolbars_Dock_Area_Top";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WinForms.UiObjectDescription CreateDescription()
				{
					return new HP.LFT.SDK.WinForms.UiObjectDescription
					{
						ObjectName = @"_BaseForm_Toolbars_Dock_Area_Top",
						FullNamePath = @"_BaseForm_Toolbars_Dock_Area_Top;OrderParent",
						FullType = @"Infragistics.Win.UltraWinToolbars.UltraToolbarsDockArea"
					};
				}
			
				#endregion
			
			}

			public sealed class OrderExplorerWindowNode : WinForms.WindowNodeBase
			{
				#region Constructors
			
				public OrderExplorerWindowNode(AppModelBase applicationModel) : base(applicationModel)
				{
					UltraTreeDepartmentsUiObject = new UltraTreeDepartmentsUiObjectNode(this, applicationModel);
					DisplayName = @"Order Explorer";
				}
			
				public OrderExplorerWindowNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					UltraTreeDepartmentsUiObject = new UltraTreeDepartmentsUiObjectNode(this, applicationModel);
					DisplayName = @"Order Explorer";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WinForms.WindowDescription CreateDescription()
				{
					return new HP.LFT.SDK.WinForms.WindowDescription
					{
						IsChildWindow = true,
						IsOwnedWindow = false,
						ObjectName = @"OrderExplorer",
						WindowTitleRegExp = @"Order Explorer"
					};
				}
			
				#endregion
			
				#region Test Objects
			
				public UltraTreeDepartmentsUiObjectNode UltraTreeDepartmentsUiObject { get; private set; }
			
				#endregion
			
				#region Inner Classes
			
				public sealed class UltraTreeDepartmentsUiObjectNode : WinForms.UiObjectNodeBase
				{
					#region Constructors
				
					public UltraTreeDepartmentsUiObjectNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
					{
						DisplayName = @"ultraTreeDepartments";
					}
				
					#endregion
				
					#region Description
				
					protected override HP.LFT.SDK.WinForms.UiObjectDescription CreateDescription()
					{
						return new HP.LFT.SDK.WinForms.UiObjectDescription
						{
							ObjectName = @"ultraTreeDepartments"
						};
					}
				
					#endregion
				
				}

				#endregion
			}

			public sealed class NewOrderNode : WinForms.WindowNodeBase
			{
				#region Constructors
			
				public NewOrderNode(AppModelBase applicationModel) : base(applicationModel)
				{
					GridBoardCardsTable = new GridBoardCardsTableNode(this, applicationModel);
					CboCurveGroupsUiObject = new CboCurveGroupsUiObjectNode(this, applicationModel);
					ChkShowAllUiObject = new ChkShowAllUiObjectNode(this, applicationModel);
					NextButton = new NextButtonNode(this, applicationModel);
					CboSizeScalesUiObject = new CboSizeScalesUiObjectNode(this, applicationModel);
					OptionsGridTable = new OptionsGridTableNode(this, applicationModel);
					FinishButton = new FinishButtonNode(this, applicationModel);
					DisplayName = @"New Order";
				}
			
				public NewOrderNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					GridBoardCardsTable = new GridBoardCardsTableNode(this, applicationModel);
					CboCurveGroupsUiObject = new CboCurveGroupsUiObjectNode(this, applicationModel);
					ChkShowAllUiObject = new ChkShowAllUiObjectNode(this, applicationModel);
					NextButton = new NextButtonNode(this, applicationModel);
					CboSizeScalesUiObject = new CboSizeScalesUiObjectNode(this, applicationModel);
					OptionsGridTable = new OptionsGridTableNode(this, applicationModel);
					FinishButton = new FinishButtonNode(this, applicationModel);
					DisplayName = @"New Order";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WinForms.WindowDescription CreateDescription()
				{
					return new HP.LFT.SDK.WinForms.WindowDescription
					{
						IsChildWindow = false,
						IsOwnedWindow = true,
						ObjectName = @"CreateOrderWizardForm"
					};
				}
			
				#endregion
			
				#region Test Objects
			
				public GridBoardCardsTableNode GridBoardCardsTable { get; private set; }
				public CboCurveGroupsUiObjectNode CboCurveGroupsUiObject { get; private set; }
				public ChkShowAllUiObjectNode ChkShowAllUiObject { get; private set; }
				public NextButtonNode NextButton { get; private set; }
				public CboSizeScalesUiObjectNode CboSizeScalesUiObject { get; private set; }
				public OptionsGridTableNode OptionsGridTable { get; private set; }
				public FinishButtonNode FinishButton { get; private set; }
			
				#endregion
			
				#region Inner Classes
			
				public sealed class GridBoardCardsTableNode : WinForms.TableNodeBase
				{
					#region Constructors
				
					public GridBoardCardsTableNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
					{
						DisplayName = @"gridBoardCards";
					}
				
					#endregion
				
					#region Description
				
					protected override HP.LFT.SDK.WinForms.TableDescription CreateDescription()
					{
						return new HP.LFT.SDK.WinForms.TableDescription
						{
							ObjectName = @"gridBoardCards"
						};
					}
				
					#endregion
				
				}

				public sealed class CboCurveGroupsUiObjectNode : WinForms.UiObjectNodeBase
				{
					#region Constructors
				
					public CboCurveGroupsUiObjectNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
					{
						DisplayName = @"cboCurveGroups";
					}
				
					#endregion
				
					#region Description
				
					protected override HP.LFT.SDK.WinForms.UiObjectDescription CreateDescription()
					{
						return new HP.LFT.SDK.WinForms.UiObjectDescription
						{
							ObjectName = @"cboCurveGroups"
						};
					}
				
					#endregion
				
				}

				public sealed class ChkShowAllUiObjectNode : WinForms.UiObjectNodeBase
				{
					#region Constructors
				
					public ChkShowAllUiObjectNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
					{
						DisplayName = @"chkShowAll";
					}
				
					#endregion
				
					#region Description
				
					protected override HP.LFT.SDK.WinForms.UiObjectDescription CreateDescription()
					{
						return new HP.LFT.SDK.WinForms.UiObjectDescription
						{
							ObjectName = @"chkShowAll"
						};
					}
				
					#endregion
				
				}

				public sealed class NextButtonNode : WinForms.ButtonNodeBase
				{
					#region Constructors
				
					public NextButtonNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
					{
						DisplayName = @"Next";
					}
				
					#endregion
				
					#region Description
				
					protected override HP.LFT.SDK.WinForms.ButtonDescription CreateDescription()
					{
						return new HP.LFT.SDK.WinForms.ButtonDescription
						{
							ObjectName = @"NextButton"
						};
					}
				
					#endregion
				
				}

				public sealed class CboSizeScalesUiObjectNode : WinForms.UiObjectNodeBase
				{
					#region Constructors
				
					public CboSizeScalesUiObjectNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
					{
						DisplayName = @"cboSizeScales";
					}
				
					#endregion
				
					#region Description
				
					protected override HP.LFT.SDK.WinForms.UiObjectDescription CreateDescription()
					{
						return new HP.LFT.SDK.WinForms.UiObjectDescription
						{
							ObjectName = @"cboSizeScales"
						};
					}
				
					#endregion
				
				}

				public sealed class OptionsGridTableNode : WinForms.TableNodeBase
				{
					#region Constructors
				
					public OptionsGridTableNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
					{
						DisplayName = @"optionsGrid";
					}
				
					#endregion
				
					#region Description
				
					protected override HP.LFT.SDK.WinForms.TableDescription CreateDescription()
					{
						return new HP.LFT.SDK.WinForms.TableDescription
						{
							ObjectName = @"optionsGrid"
						};
					}
				
					#endregion
				
				}

				public sealed class FinishButtonNode : WinForms.ButtonNodeBase
				{
					#region Constructors
				
					public FinishButtonNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
					{
						DisplayName = @"Finish";
					}
				
					#endregion
				
					#region Description
				
					protected override HP.LFT.SDK.WinForms.ButtonDescription CreateDescription()
					{
						return new HP.LFT.SDK.WinForms.ButtonDescription
						{
							ObjectName = @"FinishButton"
						};
					}
				
					#endregion
				
				}

				#endregion
			}

			public sealed class OrderEditPropertiesNode : WinForms.WindowNodeBase
			{
				#region Constructors
			
				public OrderEditPropertiesNode(AppModelBase applicationModel) : base(applicationModel)
				{
					OrderPropertiesUiObject = new OrderPropertiesUiObjectNode(this, applicationModel);
					UltraGridMainOrderTable = new UltraGridMainOrderTableNode(this, applicationModel);
					UltraGridValidationsTable = new UltraGridValidationsTableNode(this, applicationModel);
					PreliminaryUiObject = new PreliminaryUiObjectNode(this, applicationModel);
					UltraTabControl1UiObject = new UltraTabControl1UiObjectNode(this, applicationModel);
					UltraGridPriceCalculationTable = new UltraGridPriceCalculationTableNode(this, applicationModel);
					UltraGridTMQMAQTable = new UltraGridTMQMAQTableNode(this, applicationModel);
					DisplayName = @"OrderEditer";
				}
			
				public OrderEditPropertiesNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					OrderPropertiesUiObject = new OrderPropertiesUiObjectNode(this, applicationModel);
					UltraGridMainOrderTable = new UltraGridMainOrderTableNode(this, applicationModel);
					UltraGridValidationsTable = new UltraGridValidationsTableNode(this, applicationModel);
					PreliminaryUiObject = new PreliminaryUiObjectNode(this, applicationModel);
					UltraTabControl1UiObject = new UltraTabControl1UiObjectNode(this, applicationModel);
					UltraGridPriceCalculationTable = new UltraGridPriceCalculationTableNode(this, applicationModel);
					UltraGridTMQMAQTable = new UltraGridTMQMAQTableNode(this, applicationModel);
					DisplayName = @"OrderEditer";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WinForms.WindowDescription CreateDescription()
				{
					return new HP.LFT.SDK.WinForms.WindowDescription
					{
						IsChildWindow = true,
						IsOwnedWindow = false,
						ObjectName = @"OrderEditor"
					};
				}
			
				#endregion
			
				#region Test Objects
			
				public OrderPropertiesUiObjectNode OrderPropertiesUiObject { get; private set; }
				public UltraGridMainOrderTableNode UltraGridMainOrderTable { get; private set; }
				public UltraGridValidationsTableNode UltraGridValidationsTable { get; private set; }
				public PreliminaryUiObjectNode PreliminaryUiObject { get; private set; }
				public UltraTabControl1UiObjectNode UltraTabControl1UiObject { get; private set; }
				public UltraGridPriceCalculationTableNode UltraGridPriceCalculationTable { get; private set; }
				public UltraGridTMQMAQTableNode UltraGridTMQMAQTable { get; private set; }
			
				#endregion
			
				#region Inner Classes
			
				public sealed class OrderPropertiesUiObjectNode : WinForms.UiObjectNodeBase
				{
					#region Constructors
				
					public OrderPropertiesUiObjectNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
					{
						DisplayName = @"Order Properties";
					}
				
					#endregion
				
					#region Description
				
					protected override HP.LFT.SDK.WinForms.UiObjectDescription CreateDescription()
					{
						return new HP.LFT.SDK.WinForms.UiObjectDescription
						{
							ObjectName = @"ultraGroupBox1",
							FullNamePath = @"ultraGroupBox1;orderPropertiesControl1;PropertiesGroupBox;dockableWindow3;windowDockingArea1;OrderEditor;;OrderParent",
							FullType = @"Infragistics.Win.Misc.UltraGroupBox"
						};
					}
				
					#endregion
				
				}

				public sealed class UltraGridMainOrderTableNode : WinForms.TableNodeBase
				{
					#region Constructors
				
					public UltraGridMainOrderTableNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
					{
						DisplayName = @"ultraGridMainOrder";
					}
				
					#endregion
				
					#region Description
				
					protected override HP.LFT.SDK.WinForms.TableDescription CreateDescription()
					{
						return new HP.LFT.SDK.WinForms.TableDescription
						{
							ObjectName = @"ultraGridMainOrder"
						};
					}
				
					#endregion
				
				}

				public sealed class UltraGridValidationsTableNode : WinForms.TableNodeBase
				{
					#region Constructors
				
					public UltraGridValidationsTableNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
					{
						DisplayName = @"ultraGridValidations";
					}
				
					#endregion
				
					#region Description
				
					protected override HP.LFT.SDK.WinForms.TableDescription CreateDescription()
					{
						return new HP.LFT.SDK.WinForms.TableDescription
						{
							ObjectName = @"ultraGridValidations"
						};
					}
				
					#endregion
				
				}

				public sealed class PreliminaryUiObjectNode : WinForms.UiObjectNodeBase
				{
					#region Constructors
				
					public PreliminaryUiObjectNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
					{
						DisplayName = @"Preliminary";
					}
				
					#endregion
				
					#region Description
				
					protected override HP.LFT.SDK.WinForms.UiObjectDescription CreateDescription()
					{
						return new HP.LFT.SDK.WinForms.UiObjectDescription
						{
							ObjectName = @"cboStatus"
						};
					}
				
					#endregion
				
				}

				public sealed class UltraTabControl1UiObjectNode : WinForms.UiObjectNodeBase
				{
					#region Constructors
				
					public UltraTabControl1UiObjectNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
					{
						DisplayName = @"ultraTabControl1";
					}
				
					#endregion
				
					#region Description
				
					protected override HP.LFT.SDK.WinForms.UiObjectDescription CreateDescription()
					{
						return new HP.LFT.SDK.WinForms.UiObjectDescription
						{
							ObjectName = @"ultraTabControl1"
						};
					}
				
					#endregion
				
				}

				public sealed class UltraGridPriceCalculationTableNode : WinForms.TableNodeBase
				{
					#region Constructors
				
					public UltraGridPriceCalculationTableNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
					{
						DisplayName = @"ultraGridPriceCalculation";
					}
				
					#endregion
				
					#region Description
				
					protected override HP.LFT.SDK.WinForms.TableDescription CreateDescription()
					{
						return new HP.LFT.SDK.WinForms.TableDescription
						{
							ObjectName = @"ultraGridPriceCalculation"
						};
					}
				
					#endregion
				
				}

				public sealed class UltraGridTMQMAQTableNode : WinForms.TableNodeBase
				{
					#region Constructors
				
					public UltraGridTMQMAQTableNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
					{
						DisplayName = @"ultraGridTMQMAQ";
					}
				
					#endregion
				
					#region Description
				
					protected override HP.LFT.SDK.WinForms.TableDescription CreateDescription()
					{
						return new HP.LFT.SDK.WinForms.TableDescription
						{
							ObjectName = @"ultraGridTMQMAQ"
						};
					}
				
					#endregion
				
				}

				#endregion
			}

			public sealed class UpdateTODWindowNode : WinForms.WindowNodeBase
			{
				#region Constructors
			
				public UpdateTODWindowNode(AppModelBase applicationModel) : base(applicationModel)
				{
					YesUiObject = new YesUiObjectNode(this, applicationModel);
					DisplayName = @"Update TOD";
				}
			
				public UpdateTODWindowNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					YesUiObject = new YesUiObjectNode(this, applicationModel);
					DisplayName = @"Update TOD";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WinForms.WindowDescription CreateDescription()
				{
					return new HP.LFT.SDK.WinForms.WindowDescription
					{
						IsChildWindow = false,
						IsOwnedWindow = true,
						ObjectName = @"ConfirmationDialog",
						WindowTitleRegExp = @"Update TOD"
					};
				}
			
				#endregion
			
				#region Test Objects
			
				public YesUiObjectNode YesUiObject { get; private set; }
			
				#endregion
			
				#region Inner Classes
			
				public sealed class YesUiObjectNode : WinForms.UiObjectNodeBase
				{
					#region Constructors
				
					public YesUiObjectNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
					{
						DisplayName = @"Yes";
					}
				
					#endregion
				
					#region Description
				
					protected override HP.LFT.SDK.WinForms.UiObjectDescription CreateDescription()
					{
						return new HP.LFT.SDK.WinForms.UiObjectDescription
						{
							ObjectName = @"btnYes"
						};
					}
				
					#endregion
				
				}

				#endregion
			}

			public sealed class UltraGridRightClickMenuToolBarNode : WinForms.ToolBarNodeBase
			{
				#region Constructors
			
				public UltraGridRightClickMenuToolBarNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"_ultraGridRightClickMenu";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WinForms.ToolBarDescription CreateDescription()
				{
					return new HP.LFT.SDK.WinForms.ToolBarDescription
					{
						ObjectName = @"_ultraGridRightClickMenu"
					};
				}
			
				#endregion
			
			}

			public sealed class TestAutoProdWindowNode : WinForms.WindowNodeBase
			{
				#region Constructors
			
				public TestAutoProdWindowNode(AppModelBase applicationModel) : base(applicationModel)
				{
					TxtOrderNoEmbeddableTextBoxEditField = new TxtOrderNoEmbeddableTextBoxEditFieldNode(this, applicationModel);
					DisplayName = @"ProductWindow";
				}
			
				public TestAutoProdWindowNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					TxtOrderNoEmbeddableTextBoxEditField = new TxtOrderNoEmbeddableTextBoxEditFieldNode(this, applicationModel);
					DisplayName = @"ProductWindow";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WinForms.WindowDescription CreateDescription()
				{
					return new HP.LFT.SDK.WinForms.WindowDescription
					{
						IsChildWindow = true,
						IsOwnedWindow = false,
						ObjectName = @"OrderEditor"
					};
				}
			
				#endregion
			
				#region Test Objects
			
				public TxtOrderNoEmbeddableTextBoxEditFieldNode TxtOrderNoEmbeddableTextBoxEditField { get; private set; }
			
				#endregion
			
				#region Inner Classes
			
				public sealed class TxtOrderNoEmbeddableTextBoxEditFieldNode : WinForms.EditFieldNodeBase
				{
					#region Constructors
				
					public TxtOrderNoEmbeddableTextBoxEditFieldNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
					{
						DisplayName = @"txtOrderNo_EmbeddableTextBox";
					}
				
					#endregion
				
					#region Description
				
					protected override HP.LFT.SDK.WinForms.EditFieldDescription CreateDescription()
					{
						return new HP.LFT.SDK.WinForms.EditFieldDescription
						{
							ObjectName = @"txtOrderNo_EmbeddableTextBox"
						};
					}
				
					#endregion
				
				}

				#endregion
			}

			public sealed class ClosingHMOrderWindowNode : WinForms.WindowNodeBase
			{
				#region Constructors
			
				public ClosingHMOrderWindowNode(AppModelBase applicationModel) : base(applicationModel)
				{
					YesUiObject = new YesUiObjectNode(this, applicationModel);
					DisplayName = @"Closing HMOrder";
				}
			
				public ClosingHMOrderWindowNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					YesUiObject = new YesUiObjectNode(this, applicationModel);
					DisplayName = @"Closing HMOrder";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.WinForms.WindowDescription CreateDescription()
				{
					return new HP.LFT.SDK.WinForms.WindowDescription
					{
						IsChildWindow = false,
						IsOwnedWindow = true,
						ObjectName = @"ConfirmationDialog",
						WindowTitleRegExp = @"Closing HMOrder"
					};
				}
			
				#endregion
			
				#region Test Objects
			
				public YesUiObjectNode YesUiObject { get; private set; }
			
				#endregion
			
				#region Inner Classes
			
				public sealed class YesUiObjectNode : WinForms.UiObjectNodeBase
				{
					#region Constructors
				
					public YesUiObjectNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
					{
						DisplayName = @"Yes";
					}
				
					#endregion
				
					#region Description
				
					protected override HP.LFT.SDK.WinForms.UiObjectDescription CreateDescription()
					{
						return new HP.LFT.SDK.WinForms.UiObjectDescription
						{
							ObjectName = @"btnYes"
						};
					}
				
					#endregion
				
				}

				#endregion
			}

			#endregion
		}

		public sealed class MozillaFirefoxWindowNode : StandardWindows.WindowNodeBase
		{
			#region Constructors
		
			public MozillaFirefoxWindowNode(AppModelBase applicationModel) : base(applicationModel)
			{
				AuthenticationRequiredDialog = new AuthenticationRequiredDialogNode(this, applicationModel);
				DisplayName = @"Mozilla Firefox";
			}
		
			public MozillaFirefoxWindowNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
			{
				AuthenticationRequiredDialog = new AuthenticationRequiredDialogNode(this, applicationModel);
				DisplayName = @"Mozilla Firefox";
			}
		
			#endregion
		
			#region Description
		
			protected override HP.LFT.SDK.StdWin.WindowDescription CreateDescription()
			{
				return new HP.LFT.SDK.StdWin.WindowDescription
				{
					IsOwnedWindow = false,
					IsChildWindow = false,
					Text = @"Mozilla Firefox",
					WindowClassRegExp = @"MozillaWindowClass",
					WindowTitleRegExp = @"Mozilla Firefox"
				};
			}
		
			#endregion
		
			#region Test Objects
		
			public AuthenticationRequiredDialogNode AuthenticationRequiredDialog { get; private set; }
		
			#endregion
		
			#region Inner Classes
		
			public sealed class AuthenticationRequiredDialogNode : StandardWindows.DialogNodeBase
			{
				#region Constructors
			
				public AuthenticationRequiredDialogNode(AppModelBase applicationModel) : base(applicationModel)
				{
					DisplayName = @"Authentication Required";
				}
			
				public AuthenticationRequiredDialogNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Authentication Required";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.StdWin.DialogDescription CreateDescription()
				{
					return new HP.LFT.SDK.StdWin.DialogDescription
					{
						IsOwnedWindow = true,
						IsChildWindow = false,
						Text = @"Authentication Required",
						NativeClass = @"MozillaDialogClass"
					};
				}
			
				#endregion
			
			}

			#endregion
		}

		#endregion

		#region Base Classes

		public class WinForms
		{
			public abstract class EditFieldNodeBase : AppModelNodeBase<HP.LFT.SDK.WinForms.IEditField, HP.LFT.SDK.WinForms.EditFieldDescription>, HP.LFT.SDK.WinForms.IEditField
			{
				public EditFieldNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

				#region Public Methods
		
				public void SetText(string text)
				{
					 Concrete.SetText(text);
				}
		
				public void SetSecure(string encodedText)
				{
					 Concrete.SetSecure(encodedText);
				}
		
				public void Select(int fromCharPos, int toCharPos)
				{
					 Concrete.Select(fromCharPos, toCharPos);
				}
		
				public void FireEvent(string type, params object[] args)
				{
					 Concrete.FireEvent(type, args);
				}
		
				public TValue GetObjectProperty<TValue>(string propName) 
				{
					return Concrete.GetObjectProperty<TValue>(propName);
				}
		
				public void MouseMove(HP.LFT.SDK.Location moveTo)
				{
					 Concrete.MouseMove(moveTo);
				}
		
				public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
				{
					 Concrete.Click(button);
				}
		
				public void Click(HP.LFT.SDK.ClickArgs args)
				{
					 Concrete.Click(args);
				}
		
				public void DoubleClick(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
				{
					 Concrete.DoubleClick(button);
				}
		
				public void DoubleClick(HP.LFT.SDK.ClickArgs args)
				{
					 Concrete.DoubleClick(args);
				}
		
				public void SendKeys(string input, HP.LFT.SDK.KeyModifier modifiers)
				{
					 Concrete.SendKeys(input, modifiers);
				}
		
				public void SendKeys(string input)
				{
					 Concrete.SendKeys(input);
				}
		
				public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
				{
					 Concrete.DragAndDropOn(dropTarget);
				}
		
				public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
				{
					 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
				}
		
				public HP.LFT.SDK.IDescription GetDescription()
				{
					return Concrete.GetDescription();
				}
		
				public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.FindChildren<TChild>(selector);
				}
		
				public bool Exists()
				{
					return Concrete.Exists();
				}
		
				public bool Exists(uint timeout)
				{
					return Concrete.Exists(timeout);
				}
		
				public System.Drawing.Image GetSnapshot()
				{
					return Concrete.GetSnapshot();
				}
		
				public void Highlight()
				{
					 Concrete.Highlight();
				}
		
				public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.HighlightMatches<TChild>(description);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
				{
					return Concrete.GetTextLocations(textToFind);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
				{
					return Concrete.GetTextLocations(textToFind, textArea);
				}
		
				public string GetVisibleText()
				{
					return Concrete.GetVisibleText();
				}
		
				public string GetVisibleText(System.Drawing.Rectangle textArea)
				{
					return Concrete.GetVisibleText(textArea);
				}
		
				public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
				{
					return Concrete.VerifyImageExists(imageToFind, similarity);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
				}
		
				public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.Describe<TChild>(description);
				}
		
				#endregion
		
				#region Public Properties
		
				public string ErrorText
				{
					get { return Concrete.ErrorText; }		
				}
		
				public bool IsChildWindow
				{
					get { return Concrete.IsChildWindow; }		
				}
		
				public bool IsOwnedWindow
				{
					get { return Concrete.IsOwnedWindow; }		
				}
		
				public string ObjectName
				{
					get { return Concrete.ObjectName; }		
				}
		
				public string FullNamePath
				{
					get { return Concrete.FullNamePath; }		
				}
		
				public string FullType
				{
					get { return Concrete.FullType; }		
				}
		
				public string Text
				{
					get { return Concrete.Text; }		
				}
		
				public string WindowClassRegExp
				{
					get { return Concrete.WindowClassRegExp; }		
				}
		
				public int WindowId
				{
					get { return Concrete.WindowId; }		
				}
		
				public bool IsEnabled
				{
					get { return Concrete.IsEnabled; }		
				}
		
				public bool IsFocused
				{
					get { return Concrete.IsFocused; }		
				}
		
				public string NativeClass
				{
					get { return Concrete.NativeClass; }		
				}
		
				public string WindowTitleRegExp
				{
					get { return Concrete.WindowTitleRegExp; }		
				}
		
				public bool IsVisible
				{
					get { return Concrete.IsVisible; }		
				}
		
				public System.IntPtr Handle
				{
					get { return Concrete.Handle; }		
				}
		
				public System.Drawing.Point Location
				{
					get { return Concrete.Location; }		
				}
		
				public System.Drawing.Point AbsoluteLocation
				{
					get { return Concrete.AbsoluteLocation; }		
				}
		
				public System.Drawing.Size Size
				{
					get { return Concrete.Size; }		
				}
		
				public dynamic NativeObject
				{
					get { return Concrete.NativeObject; }		
				}
		
				public string DisplayName
				{
					get { return Concrete.DisplayName; }		
					set { Concrete.DisplayName = value; }
				}
		
				#endregion
			}

			public abstract class ToolBarNodeBase : AppModelNodeBase<HP.LFT.SDK.WinForms.IToolBar, HP.LFT.SDK.WinForms.ToolBarDescription>, HP.LFT.SDK.WinForms.IToolBar
			{
				public ToolBarNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

				#region Public Methods
		
				public void Select(string itemPath)
				{
					 Concrete.Select(itemPath);
				}
		
				public void ShowDropdown(string itemPath)
				{
					 Concrete.ShowDropdown(itemPath);
				}
		
				public void ShowDropdown(int index)
				{
					 Concrete.ShowDropdown(index);
				}
		
				public bool IsItemExists(string itemPath)
				{
					return Concrete.IsItemExists(itemPath);
				}
		
				public HP.LFT.SDK.WinForms.IToolBarItem GetItem(string text)
				{
					return Concrete.GetItem(text);
				}
		
				public void FireEvent(string type, params object[] args)
				{
					 Concrete.FireEvent(type, args);
				}
		
				public TValue GetObjectProperty<TValue>(string propName) 
				{
					return Concrete.GetObjectProperty<TValue>(propName);
				}
		
				public void MouseMove(HP.LFT.SDK.Location moveTo)
				{
					 Concrete.MouseMove(moveTo);
				}
		
				public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
				{
					 Concrete.Click(button);
				}
		
				public void Click(HP.LFT.SDK.ClickArgs args)
				{
					 Concrete.Click(args);
				}
		
				public void DoubleClick(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
				{
					 Concrete.DoubleClick(button);
				}
		
				public void DoubleClick(HP.LFT.SDK.ClickArgs args)
				{
					 Concrete.DoubleClick(args);
				}
		
				public void SendKeys(string input, HP.LFT.SDK.KeyModifier modifiers)
				{
					 Concrete.SendKeys(input, modifiers);
				}
		
				public void SendKeys(string input)
				{
					 Concrete.SendKeys(input);
				}
		
				public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
				{
					 Concrete.DragAndDropOn(dropTarget);
				}
		
				public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
				{
					 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
				}
		
				public HP.LFT.SDK.IDescription GetDescription()
				{
					return Concrete.GetDescription();
				}
		
				public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.FindChildren<TChild>(selector);
				}
		
				public bool Exists()
				{
					return Concrete.Exists();
				}
		
				public bool Exists(uint timeout)
				{
					return Concrete.Exists(timeout);
				}
		
				public System.Drawing.Image GetSnapshot()
				{
					return Concrete.GetSnapshot();
				}
		
				public void Highlight()
				{
					 Concrete.Highlight();
				}
		
				public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.HighlightMatches<TChild>(description);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
				{
					return Concrete.GetTextLocations(textToFind);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
				{
					return Concrete.GetTextLocations(textToFind, textArea);
				}
		
				public string GetVisibleText()
				{
					return Concrete.GetVisibleText();
				}
		
				public string GetVisibleText(System.Drawing.Rectangle textArea)
				{
					return Concrete.GetVisibleText(textArea);
				}
		
				public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
				{
					return Concrete.VerifyImageExists(imageToFind, similarity);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
				}
		
				public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.Describe<TChild>(description);
				}
		
				#endregion
		
				#region Public Properties
		
				public System.Collections.ObjectModel.ReadOnlyCollection<string> TopMenuItems
				{
					get { return Concrete.TopMenuItems; }		
				}
		
				public System.Collections.ObjectModel.ReadOnlyCollection<HP.LFT.SDK.WinForms.IToolBarItem> Items
				{
					get { return Concrete.Items; }		
				}
		
				public System.Collections.ObjectModel.ReadOnlyCollection<HP.LFT.SDK.WinForms.IToolBarItem> SelectedItems
				{
					get { return Concrete.SelectedItems; }		
				}
		
				public string ErrorText
				{
					get { return Concrete.ErrorText; }		
				}
		
				public bool IsChildWindow
				{
					get { return Concrete.IsChildWindow; }		
				}
		
				public bool IsOwnedWindow
				{
					get { return Concrete.IsOwnedWindow; }		
				}
		
				public string ObjectName
				{
					get { return Concrete.ObjectName; }		
				}
		
				public string FullNamePath
				{
					get { return Concrete.FullNamePath; }		
				}
		
				public string FullType
				{
					get { return Concrete.FullType; }		
				}
		
				public string Text
				{
					get { return Concrete.Text; }		
				}
		
				public string WindowClassRegExp
				{
					get { return Concrete.WindowClassRegExp; }		
				}
		
				public int WindowId
				{
					get { return Concrete.WindowId; }		
				}
		
				public bool IsEnabled
				{
					get { return Concrete.IsEnabled; }		
				}
		
				public bool IsFocused
				{
					get { return Concrete.IsFocused; }		
				}
		
				public string NativeClass
				{
					get { return Concrete.NativeClass; }		
				}
		
				public string WindowTitleRegExp
				{
					get { return Concrete.WindowTitleRegExp; }		
				}
		
				public bool IsVisible
				{
					get { return Concrete.IsVisible; }		
				}
		
				public System.IntPtr Handle
				{
					get { return Concrete.Handle; }		
				}
		
				public System.Drawing.Point Location
				{
					get { return Concrete.Location; }		
				}
		
				public System.Drawing.Point AbsoluteLocation
				{
					get { return Concrete.AbsoluteLocation; }		
				}
		
				public System.Drawing.Size Size
				{
					get { return Concrete.Size; }		
				}
		
				public dynamic NativeObject
				{
					get { return Concrete.NativeObject; }		
				}
		
				public string DisplayName
				{
					get { return Concrete.DisplayName; }		
					set { Concrete.DisplayName = value; }
				}
		
				#endregion
			}

			public abstract class ButtonNodeBase : AppModelNodeBase<HP.LFT.SDK.WinForms.IButton, HP.LFT.SDK.WinForms.ButtonDescription>, HP.LFT.SDK.WinForms.IButton
			{
				public ButtonNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

				#region Public Methods
		
				public void FireEvent(string type, params object[] args)
				{
					 Concrete.FireEvent(type, args);
				}
		
				public TValue GetObjectProperty<TValue>(string propName) 
				{
					return Concrete.GetObjectProperty<TValue>(propName);
				}
		
				public void MouseMove(HP.LFT.SDK.Location moveTo)
				{
					 Concrete.MouseMove(moveTo);
				}
		
				public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
				{
					 Concrete.Click(button);
				}
		
				public void Click(HP.LFT.SDK.ClickArgs args)
				{
					 Concrete.Click(args);
				}
		
				public void DoubleClick(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
				{
					 Concrete.DoubleClick(button);
				}
		
				public void DoubleClick(HP.LFT.SDK.ClickArgs args)
				{
					 Concrete.DoubleClick(args);
				}
		
				public void SendKeys(string input, HP.LFT.SDK.KeyModifier modifiers)
				{
					 Concrete.SendKeys(input, modifiers);
				}
		
				public void SendKeys(string input)
				{
					 Concrete.SendKeys(input);
				}
		
				public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
				{
					 Concrete.DragAndDropOn(dropTarget);
				}
		
				public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
				{
					 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
				}
		
				public HP.LFT.SDK.IDescription GetDescription()
				{
					return Concrete.GetDescription();
				}
		
				public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.FindChildren<TChild>(selector);
				}
		
				public bool Exists()
				{
					return Concrete.Exists();
				}
		
				public bool Exists(uint timeout)
				{
					return Concrete.Exists(timeout);
				}
		
				public System.Drawing.Image GetSnapshot()
				{
					return Concrete.GetSnapshot();
				}
		
				public void Highlight()
				{
					 Concrete.Highlight();
				}
		
				public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.HighlightMatches<TChild>(description);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
				{
					return Concrete.GetTextLocations(textToFind);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
				{
					return Concrete.GetTextLocations(textToFind, textArea);
				}
		
				public string GetVisibleText()
				{
					return Concrete.GetVisibleText();
				}
		
				public string GetVisibleText(System.Drawing.Rectangle textArea)
				{
					return Concrete.GetVisibleText(textArea);
				}
		
				public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
				{
					return Concrete.VerifyImageExists(imageToFind, similarity);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
				}
		
				public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.Describe<TChild>(description);
				}
		
				#endregion
		
				#region Public Properties
		
				public string ErrorText
				{
					get { return Concrete.ErrorText; }		
				}
		
				public bool IsChildWindow
				{
					get { return Concrete.IsChildWindow; }		
				}
		
				public bool IsOwnedWindow
				{
					get { return Concrete.IsOwnedWindow; }		
				}
		
				public string ObjectName
				{
					get { return Concrete.ObjectName; }		
				}
		
				public string FullNamePath
				{
					get { return Concrete.FullNamePath; }		
				}
		
				public string FullType
				{
					get { return Concrete.FullType; }		
				}
		
				public string Text
				{
					get { return Concrete.Text; }		
				}
		
				public string WindowClassRegExp
				{
					get { return Concrete.WindowClassRegExp; }		
				}
		
				public int WindowId
				{
					get { return Concrete.WindowId; }		
				}
		
				public bool IsEnabled
				{
					get { return Concrete.IsEnabled; }		
				}
		
				public bool IsFocused
				{
					get { return Concrete.IsFocused; }		
				}
		
				public string NativeClass
				{
					get { return Concrete.NativeClass; }		
				}
		
				public string WindowTitleRegExp
				{
					get { return Concrete.WindowTitleRegExp; }		
				}
		
				public bool IsVisible
				{
					get { return Concrete.IsVisible; }		
				}
		
				public System.IntPtr Handle
				{
					get { return Concrete.Handle; }		
				}
		
				public System.Drawing.Point Location
				{
					get { return Concrete.Location; }		
				}
		
				public System.Drawing.Point AbsoluteLocation
				{
					get { return Concrete.AbsoluteLocation; }		
				}
		
				public System.Drawing.Size Size
				{
					get { return Concrete.Size; }		
				}
		
				public dynamic NativeObject
				{
					get { return Concrete.NativeObject; }		
				}
		
				public string DisplayName
				{
					get { return Concrete.DisplayName; }		
					set { Concrete.DisplayName = value; }
				}
		
				#endregion
			}

			public abstract class TableNodeBase : AppModelNodeBase<HP.LFT.SDK.WinForms.ITable, HP.LFT.SDK.WinForms.TableDescription>, HP.LFT.SDK.WinForms.ITable
			{
				public TableNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

				#region Public Methods
		
				public void ActivateCell(int row, int column)
				{
					 Concrete.ActivateCell(row, column);
				}
		
				public void ActivateRow(int row)
				{
					 Concrete.ActivateRow(row);
				}
		
				public void MakeCellVisible(int row, int column)
				{
					 Concrete.MakeCellVisible(row, column);
				}
		
				public void SelectCell(int row, int column)
				{
					 Concrete.SelectCell(row, column);
				}
		
				public void SelectRow(int row)
				{
					 Concrete.SelectRow(row);
				}
		
				public void FireEvent(string type, params object[] args)
				{
					 Concrete.FireEvent(type, args);
				}
		
				public TValue GetObjectProperty<TValue>(string propName) 
				{
					return Concrete.GetObjectProperty<TValue>(propName);
				}
		
				public void MouseMove(HP.LFT.SDK.Location moveTo)
				{
					 Concrete.MouseMove(moveTo);
				}
		
				public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
				{
					 Concrete.Click(button);
				}
		
				public void Click(HP.LFT.SDK.ClickArgs args)
				{
					 Concrete.Click(args);
				}
		
				public void DoubleClick(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
				{
					 Concrete.DoubleClick(button);
				}
		
				public void DoubleClick(HP.LFT.SDK.ClickArgs args)
				{
					 Concrete.DoubleClick(args);
				}
		
				public void SendKeys(string input, HP.LFT.SDK.KeyModifier modifiers)
				{
					 Concrete.SendKeys(input, modifiers);
				}
		
				public void SendKeys(string input)
				{
					 Concrete.SendKeys(input);
				}
		
				public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
				{
					 Concrete.DragAndDropOn(dropTarget);
				}
		
				public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
				{
					 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
				}
		
				public HP.LFT.SDK.IDescription GetDescription()
				{
					return Concrete.GetDescription();
				}
		
				public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.FindChildren<TChild>(selector);
				}
		
				public bool Exists()
				{
					return Concrete.Exists();
				}
		
				public bool Exists(uint timeout)
				{
					return Concrete.Exists(timeout);
				}
		
				public System.Drawing.Image GetSnapshot()
				{
					return Concrete.GetSnapshot();
				}
		
				public void Highlight()
				{
					 Concrete.Highlight();
				}
		
				public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.HighlightMatches<TChild>(description);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
				{
					return Concrete.GetTextLocations(textToFind);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
				{
					return Concrete.GetTextLocations(textToFind, textArea);
				}
		
				public string GetVisibleText()
				{
					return Concrete.GetVisibleText();
				}
		
				public string GetVisibleText(System.Drawing.Rectangle textArea)
				{
					return Concrete.GetVisibleText(textArea);
				}
		
				public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
				{
					return Concrete.VerifyImageExists(imageToFind, similarity);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
				}
		
				public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.Describe<TChild>(description);
				}
		
				#endregion
		
				#region Public Properties
		
				public string ErrorText
				{
					get { return Concrete.ErrorText; }		
				}
		
				public HP.LFT.SDK.WinForms.GridType GridType
				{
					get { return Concrete.GridType; }		
				}
		
				public HP.LFT.SDK.WinForms.CustomGrid CustomGrid
				{
					get { return Concrete.CustomGrid; }		
				}
		
				public bool IsChildWindow
				{
					get { return Concrete.IsChildWindow; }		
				}
		
				public bool IsOwnedWindow
				{
					get { return Concrete.IsOwnedWindow; }		
				}
		
				public string ObjectName
				{
					get { return Concrete.ObjectName; }		
				}
		
				public string FullNamePath
				{
					get { return Concrete.FullNamePath; }		
				}
		
				public string FullType
				{
					get { return Concrete.FullType; }		
				}
		
				public string Text
				{
					get { return Concrete.Text; }		
				}
		
				public string WindowClassRegExp
				{
					get { return Concrete.WindowClassRegExp; }		
				}
		
				public int WindowId
				{
					get { return Concrete.WindowId; }		
				}
		
				public bool IsEnabled
				{
					get { return Concrete.IsEnabled; }		
				}
		
				public bool IsFocused
				{
					get { return Concrete.IsFocused; }		
				}
		
				public string NativeClass
				{
					get { return Concrete.NativeClass; }		
				}
		
				public string WindowTitleRegExp
				{
					get { return Concrete.WindowTitleRegExp; }		
				}
		
				public bool IsVisible
				{
					get { return Concrete.IsVisible; }		
				}
		
				public System.IntPtr Handle
				{
					get { return Concrete.Handle; }		
				}
		
				public System.Drawing.Point Location
				{
					get { return Concrete.Location; }		
				}
		
				public System.Drawing.Point AbsoluteLocation
				{
					get { return Concrete.AbsoluteLocation; }		
				}
		
				public System.Drawing.Size Size
				{
					get { return Concrete.Size; }		
				}
		
				public dynamic NativeObject
				{
					get { return Concrete.NativeObject; }		
				}
		
				public string DisplayName
				{
					get { return Concrete.DisplayName; }		
					set { Concrete.DisplayName = value; }
				}
		
				#endregion
			}

			public abstract class UiObjectNodeBase : AppModelNodeBase<HP.LFT.SDK.WinForms.IUiObject, HP.LFT.SDK.WinForms.UiObjectDescription>, HP.LFT.SDK.WinForms.IUiObject
			{
				public UiObjectNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

				#region Public Methods
		
				public HP.LFT.SDK.IDescription GetDescription()
				{
					return Concrete.GetDescription();
				}
		
				public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.FindChildren<TChild>(selector);
				}
		
				public bool Exists()
				{
					return Concrete.Exists();
				}
		
				public bool Exists(uint timeout)
				{
					return Concrete.Exists(timeout);
				}
		
				public System.Drawing.Image GetSnapshot()
				{
					return Concrete.GetSnapshot();
				}
		
				public void Highlight()
				{
					 Concrete.Highlight();
				}
		
				public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.HighlightMatches<TChild>(description);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
				{
					return Concrete.GetTextLocations(textToFind);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
				{
					return Concrete.GetTextLocations(textToFind, textArea);
				}
		
				public string GetVisibleText()
				{
					return Concrete.GetVisibleText();
				}
		
				public string GetVisibleText(System.Drawing.Rectangle textArea)
				{
					return Concrete.GetVisibleText(textArea);
				}
		
				public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
				{
					return Concrete.VerifyImageExists(imageToFind, similarity);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
				}
		
				public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.Describe<TChild>(description);
				}
		
				public void FireEvent(string type, params object[] args)
				{
					 Concrete.FireEvent(type, args);
				}
		
				public TValue GetObjectProperty<TValue>(string propName) 
				{
					return Concrete.GetObjectProperty<TValue>(propName);
				}
		
				public void MouseMove(HP.LFT.SDK.Location moveTo)
				{
					 Concrete.MouseMove(moveTo);
				}
		
				public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
				{
					 Concrete.Click(button);
				}
		
				public void Click(HP.LFT.SDK.ClickArgs args)
				{
					 Concrete.Click(args);
				}
		
				public void DoubleClick(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
				{
					 Concrete.DoubleClick(button);
				}
		
				public void DoubleClick(HP.LFT.SDK.ClickArgs args)
				{
					 Concrete.DoubleClick(args);
				}
		
				public void SendKeys(string input, HP.LFT.SDK.KeyModifier modifiers)
				{
					 Concrete.SendKeys(input, modifiers);
				}
		
				public void SendKeys(string input)
				{
					 Concrete.SendKeys(input);
				}
		
				public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
				{
					 Concrete.DragAndDropOn(dropTarget);
				}
		
				public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
				{
					 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
				}
		
				public void Scroll(HP.LFT.SDK.ScrollOrientation orientation, HP.LFT.SDK.ScrollType type, int value = 1)
				{
					 Concrete.Scroll(orientation, type, value);
				}
		
				#endregion
		
				#region Public Properties
		
				public string AttachedText
				{
					get { return Concrete.AttachedText; }		
				}
		
				public string ErrorText
				{
					get { return Concrete.ErrorText; }		
				}
		
				public string DisplayName
				{
					get { return Concrete.DisplayName; }		
					set { Concrete.DisplayName = value; }
				}
		
				public bool IsChildWindow
				{
					get { return Concrete.IsChildWindow; }		
				}
		
				public bool IsOwnedWindow
				{
					get { return Concrete.IsOwnedWindow; }		
				}
		
				public string ObjectName
				{
					get { return Concrete.ObjectName; }		
				}
		
				public string FullNamePath
				{
					get { return Concrete.FullNamePath; }		
				}
		
				public string FullType
				{
					get { return Concrete.FullType; }		
				}
		
				public string Text
				{
					get { return Concrete.Text; }		
				}
		
				public string WindowClassRegExp
				{
					get { return Concrete.WindowClassRegExp; }		
				}
		
				public int WindowId
				{
					get { return Concrete.WindowId; }		
				}
		
				public bool IsEnabled
				{
					get { return Concrete.IsEnabled; }		
				}
		
				public bool IsFocused
				{
					get { return Concrete.IsFocused; }		
				}
		
				public string NativeClass
				{
					get { return Concrete.NativeClass; }		
				}
		
				public string WindowTitleRegExp
				{
					get { return Concrete.WindowTitleRegExp; }		
				}
		
				public bool IsVisible
				{
					get { return Concrete.IsVisible; }		
				}
		
				public System.IntPtr Handle
				{
					get { return Concrete.Handle; }		
				}
		
				public System.Drawing.Point Location
				{
					get { return Concrete.Location; }		
				}
		
				public System.Drawing.Point AbsoluteLocation
				{
					get { return Concrete.AbsoluteLocation; }		
				}
		
				public System.Drawing.Size Size
				{
					get { return Concrete.Size; }		
				}
		
				public dynamic NativeObject
				{
					get { return Concrete.NativeObject; }		
				}
		
				#endregion
			}

			public abstract class WindowNodeBase : TopLevelObjectNodeBase<HP.LFT.SDK.WinForms.IWindow, HP.LFT.SDK.WinForms.WindowDescription>, HP.LFT.SDK.WinForms.IWindow
			{
				public WindowNodeBase(AppModelBase applicationModel) : base(applicationModel) { }
		
				public WindowNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

				#region Public Methods
		
				public void Activate()
				{
					 Concrete.Activate();
				}
		
				public void Activate(HP.LFT.SDK.MouseButton button)
				{
					 Concrete.Activate(button);
				}
		
				public void Close()
				{
					 Concrete.Close();
				}
		
				public void Maximize()
				{
					 Concrete.Maximize();
				}
		
				public void Minimize()
				{
					 Concrete.Minimize();
				}
		
				public void Move(System.Drawing.Point point)
				{
					 Concrete.Move(point);
				}
		
				public void Move(int x, int y)
				{
					 Concrete.Move(x, y);
				}
		
				public void Resize(System.Drawing.Size size)
				{
					 Concrete.Resize(size);
				}
		
				public void Resize(int width, int height)
				{
					 Concrete.Resize(width, height);
				}
		
				public void Restore()
				{
					 Concrete.Restore();
				}
		
				public void FireEvent(string type, params object[] args)
				{
					 Concrete.FireEvent(type, args);
				}
		
				public TValue GetObjectProperty<TValue>(string propName) 
				{
					return Concrete.GetObjectProperty<TValue>(propName);
				}
		
				public void MouseMove(HP.LFT.SDK.Location moveTo)
				{
					 Concrete.MouseMove(moveTo);
				}
		
				public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
				{
					 Concrete.Click(button);
				}
		
				public void Click(HP.LFT.SDK.ClickArgs args)
				{
					 Concrete.Click(args);
				}
		
				public void DoubleClick(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
				{
					 Concrete.DoubleClick(button);
				}
		
				public void DoubleClick(HP.LFT.SDK.ClickArgs args)
				{
					 Concrete.DoubleClick(args);
				}
		
				public void SendKeys(string input, HP.LFT.SDK.KeyModifier modifiers)
				{
					 Concrete.SendKeys(input, modifiers);
				}
		
				public void SendKeys(string input)
				{
					 Concrete.SendKeys(input);
				}
		
				public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
				{
					 Concrete.DragAndDropOn(dropTarget);
				}
		
				public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
				{
					 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
				}
		
				public HP.LFT.SDK.IDescription GetDescription()
				{
					return Concrete.GetDescription();
				}
		
				public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.FindChildren<TChild>(selector);
				}
		
				public bool Exists()
				{
					return Concrete.Exists();
				}
		
				public bool Exists(uint timeout)
				{
					return Concrete.Exists(timeout);
				}
		
				public System.Drawing.Image GetSnapshot()
				{
					return Concrete.GetSnapshot();
				}
		
				public void Highlight()
				{
					 Concrete.Highlight();
				}
		
				public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.HighlightMatches<TChild>(description);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
				{
					return Concrete.GetTextLocations(textToFind);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
				{
					return Concrete.GetTextLocations(textToFind, textArea);
				}
		
				public string GetVisibleText()
				{
					return Concrete.GetVisibleText();
				}
		
				public string GetVisibleText(System.Drawing.Rectangle textArea)
				{
					return Concrete.GetVisibleText(textArea);
				}
		
				public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
				{
					return Concrete.VerifyImageExists(imageToFind, similarity);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
				}
		
				public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.Describe<TChild>(description);
				}
		
				#endregion
		
				#region Public Properties
		
				public HP.LFT.SDK.WindowState WindowState
				{
					get { return Concrete.WindowState; }		
				}
		
				public bool IsActive
				{
					get { return Concrete.IsActive; }		
				}
		
				public bool HasBorder
				{
					get { return Concrete.HasBorder; }		
				}
		
				public bool HasCaption
				{
					get { return Concrete.HasCaption; }		
				}
		
				public bool HasSizebox
				{
					get { return Concrete.HasSizebox; }		
				}
		
				public bool HasSystemMenu
				{
					get { return Concrete.HasSystemMenu; }		
				}
		
				public bool IsMdiChildWindow
				{
					get { return Concrete.IsMdiChildWindow; }		
				}
		
				public bool IsPopupWindow
				{
					get { return Concrete.IsPopupWindow; }		
				}
		
				public bool IsToolWindow
				{
					get { return Concrete.IsToolWindow; }		
				}
		
				public bool IsMaximizable
				{
					get { return Concrete.IsMaximizable; }		
				}
		
				public bool IsMinimizable
				{
					get { return Concrete.IsMinimizable; }		
				}
		
				public bool IsTopmost
				{
					get { return Concrete.IsTopmost; }		
				}
		
				public bool IsChildWindow
				{
					get { return Concrete.IsChildWindow; }		
				}
		
				public bool IsOwnedWindow
				{
					get { return Concrete.IsOwnedWindow; }		
				}
		
				public string ObjectName
				{
					get { return Concrete.ObjectName; }		
				}
		
				public string FullNamePath
				{
					get { return Concrete.FullNamePath; }		
				}
		
				public string FullType
				{
					get { return Concrete.FullType; }		
				}
		
				public string Text
				{
					get { return Concrete.Text; }		
				}
		
				public string WindowClassRegExp
				{
					get { return Concrete.WindowClassRegExp; }		
				}
		
				public int WindowId
				{
					get { return Concrete.WindowId; }		
				}
		
				public bool IsEnabled
				{
					get { return Concrete.IsEnabled; }		
				}
		
				public bool IsFocused
				{
					get { return Concrete.IsFocused; }		
				}
		
				public string NativeClass
				{
					get { return Concrete.NativeClass; }		
				}
		
				public string WindowTitleRegExp
				{
					get { return Concrete.WindowTitleRegExp; }		
				}
		
				public bool IsVisible
				{
					get { return Concrete.IsVisible; }		
				}
		
				public System.IntPtr Handle
				{
					get { return Concrete.Handle; }		
				}
		
				public System.Drawing.Point Location
				{
					get { return Concrete.Location; }		
				}
		
				public System.Drawing.Point AbsoluteLocation
				{
					get { return Concrete.AbsoluteLocation; }		
				}
		
				public System.Drawing.Size Size
				{
					get { return Concrete.Size; }		
				}
		
				public dynamic NativeObject
				{
					get { return Concrete.NativeObject; }		
				}
		
				public string DisplayName
				{
					get { return Concrete.DisplayName; }		
					set { Concrete.DisplayName = value; }
				}
		
				#endregion
			}

		}
	
		public class StandardWindows
		{
			public abstract class DialogNodeBase : TopLevelObjectNodeBase<HP.LFT.SDK.StdWin.IDialog, HP.LFT.SDK.StdWin.DialogDescription>, HP.LFT.SDK.StdWin.IDialog
			{
				public DialogNodeBase(AppModelBase applicationModel) : base(applicationModel) { }
		
				public DialogNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

				#region Public Methods
		
				public void Activate()
				{
					 Concrete.Activate();
				}
		
				public void Activate(HP.LFT.SDK.MouseButton button)
				{
					 Concrete.Activate(button);
				}
		
				public void Close()
				{
					 Concrete.Close();
				}
		
				public void Maximize()
				{
					 Concrete.Maximize();
				}
		
				public void Minimize()
				{
					 Concrete.Minimize();
				}
		
				public void Move(System.Drawing.Point point)
				{
					 Concrete.Move(point);
				}
		
				public void Move(int x, int y)
				{
					 Concrete.Move(x, y);
				}
		
				public void Resize(System.Drawing.Size size)
				{
					 Concrete.Resize(size);
				}
		
				public void Resize(int width, int height)
				{
					 Concrete.Resize(width, height);
				}
		
				public void Restore()
				{
					 Concrete.Restore();
				}
		
				public void MouseMove(HP.LFT.SDK.Location moveTo)
				{
					 Concrete.MouseMove(moveTo);
				}
		
				public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
				{
					 Concrete.Click(button);
				}
		
				public void Click(HP.LFT.SDK.ClickArgs args)
				{
					 Concrete.Click(args);
				}
		
				public void DoubleClick(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
				{
					 Concrete.DoubleClick(button);
				}
		
				public void DoubleClick(HP.LFT.SDK.ClickArgs args)
				{
					 Concrete.DoubleClick(args);
				}
		
				public void SendKeys(string input, HP.LFT.SDK.KeyModifier modifiers)
				{
					 Concrete.SendKeys(input, modifiers);
				}
		
				public void SendKeys(string input)
				{
					 Concrete.SendKeys(input);
				}
		
				public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
				{
					 Concrete.DragAndDropOn(dropTarget);
				}
		
				public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
				{
					 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
				}
		
				public HP.LFT.SDK.IDescription GetDescription()
				{
					return Concrete.GetDescription();
				}
		
				public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.FindChildren<TChild>(selector);
				}
		
				public bool Exists()
				{
					return Concrete.Exists();
				}
		
				public bool Exists(uint timeout)
				{
					return Concrete.Exists(timeout);
				}
		
				public System.Drawing.Image GetSnapshot()
				{
					return Concrete.GetSnapshot();
				}
		
				public void Highlight()
				{
					 Concrete.Highlight();
				}
		
				public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.HighlightMatches<TChild>(description);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
				{
					return Concrete.GetTextLocations(textToFind);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
				{
					return Concrete.GetTextLocations(textToFind, textArea);
				}
		
				public string GetVisibleText()
				{
					return Concrete.GetVisibleText();
				}
		
				public string GetVisibleText(System.Drawing.Rectangle textArea)
				{
					return Concrete.GetVisibleText(textArea);
				}
		
				public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
				{
					return Concrete.VerifyImageExists(imageToFind, similarity);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
				}
		
				public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.Describe<TChild>(description);
				}
		
				#endregion
		
				#region Public Properties
		
				public bool IsActive
				{
					get { return Concrete.IsActive; }		
				}
		
				public bool HasBorder
				{
					get { return Concrete.HasBorder; }		
				}
		
				public bool HasCaption
				{
					get { return Concrete.HasCaption; }		
				}
		
				public bool HasSizebox
				{
					get { return Concrete.HasSizebox; }		
				}
		
				public bool HasSystemMenu
				{
					get { return Concrete.HasSystemMenu; }		
				}
		
				public bool IsOwnedWindow
				{
					get { return Concrete.IsOwnedWindow; }		
				}
		
				public bool IsChildWindow
				{
					get { return Concrete.IsChildWindow; }		
				}
		
				public bool IsMdiChildWindow
				{
					get { return Concrete.IsMdiChildWindow; }		
				}
		
				public bool IsPopupWindow
				{
					get { return Concrete.IsPopupWindow; }		
				}
		
				public bool IsToolWindow
				{
					get { return Concrete.IsToolWindow; }		
				}
		
				public bool IsMaximizable
				{
					get { return Concrete.IsMaximizable; }		
				}
		
				public bool IsMinimizable
				{
					get { return Concrete.IsMinimizable; }		
				}
		
				public HP.LFT.SDK.WindowState WindowState
				{
					get { return Concrete.WindowState; }		
				}
		
				public bool IsTopmost
				{
					get { return Concrete.IsTopmost; }		
				}
		
				public bool IsRightAligned
				{
					get { return Concrete.IsRightAligned; }		
				}
		
				public bool IsRightToLeftLayout
				{
					get { return Concrete.IsRightToLeftLayout; }		
				}
		
				public bool IsRightToLeftReading
				{
					get { return Concrete.IsRightToLeftReading; }		
				}
		
				public string AccessibleName
				{
					get { return Concrete.AccessibleName; }		
				}
		
				public string AttachedText
				{
					get { return Concrete.AttachedText; }		
				}
		
				public string Text
				{
					get { return Concrete.Text; }		
				}
		
				public HP.LFT.SDK.WindowExtendedStyles WindowExtendedStyle
				{
					get { return Concrete.WindowExtendedStyle; }		
				}
		
				public HP.LFT.SDK.WindowStyles WindowStyle
				{
					get { return Concrete.WindowStyle; }		
				}
		
				public string WindowClassRegExp
				{
					get { return Concrete.WindowClassRegExp; }		
				}
		
				public int WindowId
				{
					get { return Concrete.WindowId; }		
				}
		
				public bool IsEnabled
				{
					get { return Concrete.IsEnabled; }		
				}
		
				public bool IsFocused
				{
					get { return Concrete.IsFocused; }		
				}
		
				public string NativeClass
				{
					get { return Concrete.NativeClass; }		
				}
		
				public string WindowTitleRegExp
				{
					get { return Concrete.WindowTitleRegExp; }		
				}
		
				public bool IsVisible
				{
					get { return Concrete.IsVisible; }		
				}
		
				public System.IntPtr Handle
				{
					get { return Concrete.Handle; }		
				}
		
				public System.Drawing.Point Location
				{
					get { return Concrete.Location; }		
				}
		
				public System.Drawing.Point AbsoluteLocation
				{
					get { return Concrete.AbsoluteLocation; }		
				}
		
				public System.Drawing.Size Size
				{
					get { return Concrete.Size; }		
				}
		
				public string DisplayName
				{
					get { return Concrete.DisplayName; }		
					set { Concrete.DisplayName = value; }
				}
		
				#endregion
			}

			public abstract class WindowNodeBase : TopLevelObjectNodeBase<HP.LFT.SDK.StdWin.IWindow, HP.LFT.SDK.StdWin.WindowDescription>, HP.LFT.SDK.StdWin.IWindow
			{
				public WindowNodeBase(AppModelBase applicationModel) : base(applicationModel) { }
		
				public WindowNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

				#region Public Methods
		
				public void Activate()
				{
					 Concrete.Activate();
				}
		
				public void Activate(HP.LFT.SDK.MouseButton button)
				{
					 Concrete.Activate(button);
				}
		
				public void Close()
				{
					 Concrete.Close();
				}
		
				public void Maximize()
				{
					 Concrete.Maximize();
				}
		
				public void Minimize()
				{
					 Concrete.Minimize();
				}
		
				public void Move(System.Drawing.Point point)
				{
					 Concrete.Move(point);
				}
		
				public void Move(int x, int y)
				{
					 Concrete.Move(x, y);
				}
		
				public void Resize(System.Drawing.Size size)
				{
					 Concrete.Resize(size);
				}
		
				public void Resize(int width, int height)
				{
					 Concrete.Resize(width, height);
				}
		
				public void Restore()
				{
					 Concrete.Restore();
				}
		
				public void MouseMove(HP.LFT.SDK.Location moveTo)
				{
					 Concrete.MouseMove(moveTo);
				}
		
				public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
				{
					 Concrete.Click(button);
				}
		
				public void Click(HP.LFT.SDK.ClickArgs args)
				{
					 Concrete.Click(args);
				}
		
				public void DoubleClick(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
				{
					 Concrete.DoubleClick(button);
				}
		
				public void DoubleClick(HP.LFT.SDK.ClickArgs args)
				{
					 Concrete.DoubleClick(args);
				}
		
				public void SendKeys(string input, HP.LFT.SDK.KeyModifier modifiers)
				{
					 Concrete.SendKeys(input, modifiers);
				}
		
				public void SendKeys(string input)
				{
					 Concrete.SendKeys(input);
				}
		
				public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
				{
					 Concrete.DragAndDropOn(dropTarget);
				}
		
				public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
				{
					 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
				}
		
				public HP.LFT.SDK.IDescription GetDescription()
				{
					return Concrete.GetDescription();
				}
		
				public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.FindChildren<TChild>(selector);
				}
		
				public bool Exists()
				{
					return Concrete.Exists();
				}
		
				public bool Exists(uint timeout)
				{
					return Concrete.Exists(timeout);
				}
		
				public System.Drawing.Image GetSnapshot()
				{
					return Concrete.GetSnapshot();
				}
		
				public void Highlight()
				{
					 Concrete.Highlight();
				}
		
				public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.HighlightMatches<TChild>(description);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
				{
					return Concrete.GetTextLocations(textToFind);
				}
		
				public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
				{
					return Concrete.GetTextLocations(textToFind, textArea);
				}
		
				public string GetVisibleText()
				{
					return Concrete.GetVisibleText();
				}
		
				public string GetVisibleText(System.Drawing.Rectangle textArea)
				{
					return Concrete.GetVisibleText(textArea);
				}
		
				public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
				{
					return Concrete.VerifyImageExists(imageToFind, similarity);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
				}
		
				public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
				{
					return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
				}
		
				public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
				{
					return Concrete.Describe<TChild>(description);
				}
		
				#endregion
		
				#region Public Properties
		
				public bool IsActive
				{
					get { return Concrete.IsActive; }		
				}
		
				public bool HasBorder
				{
					get { return Concrete.HasBorder; }		
				}
		
				public bool HasCaption
				{
					get { return Concrete.HasCaption; }		
				}
		
				public bool HasSizebox
				{
					get { return Concrete.HasSizebox; }		
				}
		
				public bool HasSystemMenu
				{
					get { return Concrete.HasSystemMenu; }		
				}
		
				public bool IsOwnedWindow
				{
					get { return Concrete.IsOwnedWindow; }		
				}
		
				public bool IsChildWindow
				{
					get { return Concrete.IsChildWindow; }		
				}
		
				public bool IsMdiChildWindow
				{
					get { return Concrete.IsMdiChildWindow; }		
				}
		
				public bool IsPopupWindow
				{
					get { return Concrete.IsPopupWindow; }		
				}
		
				public bool IsToolWindow
				{
					get { return Concrete.IsToolWindow; }		
				}
		
				public bool IsMaximizable
				{
					get { return Concrete.IsMaximizable; }		
				}
		
				public bool IsMinimizable
				{
					get { return Concrete.IsMinimizable; }		
				}
		
				public HP.LFT.SDK.WindowState WindowState
				{
					get { return Concrete.WindowState; }		
				}
		
				public bool IsTopmost
				{
					get { return Concrete.IsTopmost; }		
				}
		
				public bool IsRightAligned
				{
					get { return Concrete.IsRightAligned; }		
				}
		
				public bool IsRightToLeftLayout
				{
					get { return Concrete.IsRightToLeftLayout; }		
				}
		
				public bool IsRightToLeftReading
				{
					get { return Concrete.IsRightToLeftReading; }		
				}
		
				public string AccessibleName
				{
					get { return Concrete.AccessibleName; }		
				}
		
				public string AttachedText
				{
					get { return Concrete.AttachedText; }		
				}
		
				public string Text
				{
					get { return Concrete.Text; }		
				}
		
				public HP.LFT.SDK.WindowExtendedStyles WindowExtendedStyle
				{
					get { return Concrete.WindowExtendedStyle; }		
				}
		
				public HP.LFT.SDK.WindowStyles WindowStyle
				{
					get { return Concrete.WindowStyle; }		
				}
		
				public string WindowClassRegExp
				{
					get { return Concrete.WindowClassRegExp; }		
				}
		
				public int WindowId
				{
					get { return Concrete.WindowId; }		
				}
		
				public bool IsEnabled
				{
					get { return Concrete.IsEnabled; }		
				}
		
				public bool IsFocused
				{
					get { return Concrete.IsFocused; }		
				}
		
				public string NativeClass
				{
					get { return Concrete.NativeClass; }		
				}
		
				public string WindowTitleRegExp
				{
					get { return Concrete.WindowTitleRegExp; }		
				}
		
				public bool IsVisible
				{
					get { return Concrete.IsVisible; }		
				}
		
				public System.IntPtr Handle
				{
					get { return Concrete.Handle; }		
				}
		
				public System.Drawing.Point Location
				{
					get { return Concrete.Location; }		
				}
		
				public System.Drawing.Point AbsoluteLocation
				{
					get { return Concrete.AbsoluteLocation; }		
				}
		
				public System.Drawing.Size Size
				{
					get { return Concrete.Size; }		
				}
		
				public string DisplayName
				{
					get { return Concrete.DisplayName; }		
					set { Concrete.DisplayName = value; }
				}
		
				#endregion
			}

		}
	
		#endregion
	}
}
